(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Spinors`",{"Global`"}]


If[StringMatchQ[$Version,"*5.0*"],Tuples[ll_List,0]:={{}};Tuples[ll_List,n_]:=Partition[Flatten[Outer[List,Sequence@@Table[ll,{jj,1,n}]]],n]]


$SpinorsFunctions=Sort[{"DeclareSpinor","SpinorQ","UndeclareSpinor","Sp","DeclareSMatrix","SMatrixQ","UndeclareSMatrix","Sm","Spaa","Spbb","Spab","Spba","ExpandSToSpinors ","ConvertSpinorsToS","Compactify","UnCompact","Schouten","s","GenMomenta","Num4V","DeclareSpinorMomentum","USpa","USpb","UbarSpa","UbarSpb","SpOpen","SpClose","La","Lat","CLa","CLat","ASpinorShift","BSpinorShift","PfromBiSpinor","Gamma0","Gamma1","Gamma2","Gamma3","Gamma5","ProjPlus","ProjMinus","DeclareLVector","UndeclareLVector","DeclareLVectorMomentum","LVectorQ","MP","MP2","ShiftBA","ASpinorReplace","BSpinorReplace","To4DimSpinor","To2DimSpinor","ASchouten","BSchouten","ACompactify","BCompactify","SmBA","Sm2","CSm2","Sm4","SmBA2","CSmBA2","SmBA4","PfromSm2","PfromSm4","PfromCSm2"}]


$SpinorPrecision=MachinePrecision


DeclareSpinor::usage="DeclareSpinor[s] or DeclareSpinor[s1,...,sn] declares the symbols s or s1,...,sn as spinors." ;


UndeclareSpinor::usage="UnDeclareSpinor[x] removes x from the list of spinors.";


SpinorQ::usage="SpinorQ[x] returns True if x is a spinor, False otherwise.";


Sp::usage="Sp[i] is represents a spinor labelled by the integer i." ;


DeclareSMatrix::usage="DeclareSMatrix[P] or DeclareSMatrix[P1,...,Pn] declares the symbols P or P1,...,Pn as slashed matrices.";


SMatrixQ::usage="SMatrixQ[x] returns True if x is a slashed matrix, False otherwise.";


UndeclareSMatrix::usage="UnDeclareSMatrix[P] removes P from the list of slashed matrices.";


Sm::usage="Sm[i] represents the slashed matrix obtained by contracting the momentum associated with the spinor labelled by the integer i with the gamma matrices.";


Spaa::usage="Spaa[a,b] or Spaa[a,\!\(\*SubscriptBox[\"P\", \"1\"]\),...,\!\(\*SubscriptBox[\"P\", 
RowBox[{\"2\", \"n\"}]]\),b] represents the spinor product <a b> or <a|\!\(\*SubscriptBox[\"P\", \"1\"]\)|...|\!\(\*SubscriptBox[\"P\", 
RowBox[{\"2\", \"n\"}]]\)|b>.";


Spab::usage="Spab[a,\!\(\*SubscriptBox[\"P\", \"1\"]\),...,\!\(\*SubscriptBox[\"P\", 
RowBox[{
RowBox[{\"2\", \"n\"}], \"+\", \"1\"}]]\),b] represents the spinor product <a|\!\(\*SubscriptBox[\"P\", \"1\"]\)|...|\!\(\*SubscriptBox[\"P\", 
RowBox[{
RowBox[{\"2\", \"n\"}], \"+\", \"1\"}]]\)|b].";


Spbb::usage="Spbb[a,b] or Spbb[a,\!\(\*SubscriptBox[\"P\", \"1\"]\),...,\!\(\*SubscriptBox[\"P\", 
RowBox[{\"2\", \"n\"}]]\),b] represents the spinor product [a b] or [a|\!\(\*SubscriptBox[\"P\", \"1\"]\)|...|\!\(\*SubscriptBox[\"P\", \"n\"]\)|b].";


Spba::usage="Spba[a,\!\(\*SubscriptBox[\"P\", \"1\"]\),...,\!\(\*SubscriptBox[\"P\", 
RowBox[{
RowBox[{\"2\", \"n\"}], \"+\", \"1\"}]]\),b] represents the spinor product [a|\!\(\*SubscriptBox[\"P\", \"1\"]\)|...|\!\(\*SubscriptBox[\"P\", 
RowBox[{
RowBox[{\"2\", \"n\"}], \"+\", \"1\"}]]\)|b>.";


ExpandSToSpinors::usage="ExpandSToSpinors[x] converts the invariants s[i,j] in x into products of spinor products.";


ConvertSpinorsToS::usage="ConvertSpinorsToS[x] converts spinor products of the form <a b>[b a] in x to invariants s[a,b].";


Compactify::usage="Compactify[x] acts on x,and
transforms spinor products with slashed matrices into spinor
products of only two spinors.For example,Compactify[<a|P|b]]
returns
<a|P(b)>.Compactify[x,a] does the same,but leaving the spinor a untouched.For
example,\n Compactify[<a|P|b],b]\n
returns
-[P(a),b].";


UnCompact::usage="UnCompact[x] undoes the action of Compactify. UnCompact[x,a] undoes the action of Compactify, but only for the spinor a.";


Schouten::usage="Schouten[x,a,b,c,d] applies the Schouten identity \n
<a b><c d> = <a c><b d> - <a d><b c>
\n
Schouten[x,a,b,c] applies the Schouten identity \n
<a b><c *> = <a c><* b> - <a *><b c>
\n
Schouten[x,l] applies the Schouten identity \n
<l a>/(<l b><l c>) = <b a>/(<l b><b c>) + <c a>/(<l c><c b>)\n or \n [l a]/([l b][l c]) = [b a]/([l b][b c]) + [c a]/([l c][c b])";


s::usage="s[a,b] is the invariant scalar product (\!\(\*SubscriptBox[\"p\", \"a\"]\)+\!\(\*SubscriptBox[\"p\", \"b\"]\)\!\(\*SuperscriptBox[\")\", \"2\"]\) between the momenta \!\(\*SubscriptBox[\"p\", 
RowBox[{\"a\", \" \"}]]\) and \!\(\*SubscriptBox[\"p\", \"b\"]\) associated with the spinors a and b.";


GenMomenta::usage="GenMomenta[{\!\(\*SubscriptBox[\"s\", \"1\"]\),...,\!\(\*SubscriptBox[\"s\", \"n\"]\)}] generates four momenta for the spinors \!\(\*SubscriptBox[\"s\", 
RowBox[{\"1\", \" \"}]]\) to \!\(\*SubscriptBox[\"s\", \"n\"]\) so that they sum to zero.\n
 GenMomenta[{\!\(\*SubscriptBox[\"s\", \"1\"]\),...,\!\(\*SubscriptBox[\"s\", \"n\"]\)} -> {\!\(\*SubscriptBox[\"p\", \"0\"]\),\!\(\*SubscriptBox[\"p\", \"x\"]\),\!\(\*SubscriptBox[\"p\", \"y\"]\),\!\(\*SubscriptBox[\"p\", \"z\"]\)}] generates four momenta for the spinors \!\(\*SubscriptBox[\"s\", 
RowBox[{\"1\", \" \"}]]\) to \!\(\*SubscriptBox[\"s\", \"n\"]\) so that the sum of the momenta equals the provided vector {\!\(\*SubscriptBox[\"p\", \"0\"]\),\!\(\*SubscriptBox[\"p\", \"x\"]\),\!\(\*SubscriptBox[\"p\", \"y\"]\),\!\(\*SubscriptBox[\"p\", \"z\"]\)}.";


Num4V::usage="Num4V[a] returns the numerical value of the four vector associated with the spinor a.\n
Num4V[P] returns the numerical value of the four vector or slashed matrix P.";


DeclareSpinorMomentum::usage="DeclareSpinorMomentum[a,{\!\(\*SubscriptBox[\"p\", \"0\"]\),\!\(\*SubscriptBox[\"p\", \"x\"]\),\!\(\*SubscriptBox[\"p\", \"y\"]\),\!\(\*SubscriptBox[\"p\", \"z\"]\)}] declares the vector provided as the second argument to be the four vector associated with the spinor provided as the first argument.";


USpa::usage="USpa[a] is the positive helicity wave function |\!\(\*SuperscriptBox[\"a\", \"+\"]\)> = |a> in the four dimensional representation associated with the spinor a";


USpb::usage="USpb[a] is the negative helicity wave function |\!\(\*SuperscriptBox[\"a\", \"-\"]\)> = |a] in the four dimensional representation associated with the spinor a";


UbarSpa::usage="UbarSpa[a] is the negative helicity conjugated wave function <\!\(\*SuperscriptBox[\"a\", \"-\"]\)| = <a| in the four dimensional representation associated with the spinor a";


UbarSpb::usage="UbarSpb[a] is the positive helicity conjugated wave function <\!\(\*SuperscriptBox[\"a\", \"+\"]\)| = [a| in the four dimensional representation associated with the spinor a";


La::usage="La[s] is the two dimensional representation of the lambda-spinor s, 
with the spinor index in the down-position.
";
Lat::usage="Lat[s] is the two dimensional representation of the lambda-tilde-spinor s, 
with the spinor index in the down-position.
";
CLa::usage="CLa[s] is the two dimensional representation of the lambda-spinor s, 
with the spinor index in the up-position.
";
CLat::usage="CLat[s] is the two dimensional representation of the lambda-tilde-spinor s, 
with the spinor index in the up-position.
";


SpOpen::usage=" SpOpen[x] decomposes spinor products in x containing slashed matrices into products of smaller spinor products, by applying:\n
k-slashed = |k>[k| + |k]<k|.\n
 SpOpen[x,a] does the same selectively, at the occurence of a-slashed.  
";


SpClose::usage="SpClose[x] reconstructs sandwiches of spinor products from 
smaller spinor product chains in x, by applying:\n
|k>[k| + |k]<k| = k-slashed.\n
SpClose[x,a] does the same selectively, at the occurence of the spinor a,  
\"closing\" only with respect to it.";


Gamma0::usage="Gamma0 ist the Dirac matrix \!\(\*SubscriptBox[\"\[Gamma]\", \"0\"]\).";Gamma1::usage="Gamma1 ist the Dirac matrix \!\(\*SubscriptBox[\"\[Gamma]\", \"1\"]\).";Gamma2::usage="Gamma2 ist the Dirac matrix \!\(\*SubscriptBox[\"\[Gamma]\", \"2\"]\).";
Gamma3::usage="Gamma3 ist the Dirac matrix \!\(\*SubscriptBox[\"\[Gamma]\", \"3\"]\).";Gamma5::usage="Gamma5 ist the Dirac matrix \!\(\*SubscriptBox[\"\[Gamma]\", \"5\"]\).";


ProjPlus::usage="ProjPlus is the positive helicity projector.";


ProjMinus::usage="ProjMinus is the negative helicity projector.";


To2DimSpinor::usage="To2DimSpinor converts spinor products in the 4 dimensional representation into spinor products in the 2 dimensional representation.";

To4DimSpinor::usage="To2DimSpinor converts spinor products in the 2 dimensional representation into spinor products in the 4 dimensional representation.";


ToSpinorLabel::usage="ToSpinorLabel converts spinor objects in from their two- or four-dimensional representation into the representation with spinor labels."


ASpinorShift::usage="ASpinorShift[x,a,s] shifts angle spinors |a> by |s>
|a> \[Rule] |a> + |s>
where |s> can be a linear combination of angle-spinors."


BSpinorShift::usage="BSpinorShift[x,a,s] shifts bracket spinors [a| and |a] by the value s."


PfromBiSpinor::usage="PfromBiSpinor[{{_,_},{_,_}}] extracts the four momentum from its bispinorial representation."


PfromSm2::usage="PfromSm2[M] extracts the four momentum corresonding to the (numerical) two dimensional slashed matrix M of the Sm2 type."


PfromSm4::usage="PfromSm4[P] extracts the four momentum corresonding to the (numerical) four dimensional slashed matrix P."


PfromCSm2::usage="PfromSm2[M] extracts the four momentum corresonding to the (numerical) two dimensional slashed matrix M of the CSm2 type."


(*GenMomentaIP::usage="experimental"*)


MP::usage="MP[p1,p2] is the Minkowski scalar product between p1 and p2 with signature (1,-1,-1,-1).";


MP2::usage="MP2[p] is a shortcut for MP[p,p], the Minkowski scalar product of p with itself with signature (1,-1,-1,-1).";


DeclareLVector::usage="DeclareLVector[P] or DeclareLVector[P1,...,Pn] declares the symbols P or P1,...,Pn as Lorentz vectors.";


LVectorQ::usage="LVectorQ[p] returns True if p is a Lorentz vector (or has a Lorentz vector bound to it, like for spinors declared with DeclareSpinor), False otherwise.";


UndeclareLVector::usage="UnDeclareLVector[P] removes P from the list of Lorentz vectors.";


DeclareLVectorMomentum::usage="DeclareLVectorMomentum[P,{\!\(\*SubscriptBox[\"p\", \"0\"]\),\!\(\*SubscriptBox[\"p\", \"x\"]\),\!\(\*SubscriptBox[\"p\", \"y\"]\),\!\(\*SubscriptBox[\"p\", \"z\"]\)}] declares the numerical value of the vector P to be that provided as the second argument."


ShiftBA::usage="ShiftBA[a,b,z][x] performs the spinor shift\n\t|a] \[Rule] |a] - z |b]\n\t|b> \[Rule] |b> + z |a>"


ShiftBA::usage="ShiftBA[b,a,z][x] performs the spinor shift\n
|b]\[Rule]|b]-z |a]\n|a>\[Rule]|a>+z |b>"


ASpinorReplace::usage="ASpinorReplace[x,a,r] replaces the angle spinor |a> with |r>"


BSpinorReplace::usage="BSpinorShift[x,a,s] shifts angle spinors |a] by |s]
|a] -> |a]+|s]
where |s] can be a linear combination of bracket-spinors.
"


ASchouten::usage="
ASchouten[x,l] applies the Schouten identity 
 <l a>/(<l b><l c>) = <b a>/(<l b><b c>) + <c a>/(<l c><c b>)";
BSchouten::usage="
 BSchouten[x,l] applies the Schouten identity 
 [l a]/([l b][l c]) = [b a]/([l b][b c]) + [c a]/([l c][c b])
";


ACompactify::usage="ACompactify[x,a] transforms Spinor products of the form \n ...a>  or <a... \n into \n <*a> or <a*> \n with slashed matrices into spinor products of only two spinors. For  For example, \nCompactify[<a|P|b],a] \n returns \n<a,P(b)>\n but leaves \n [a|P|b>\n untouched.
";


BCompactify::usage="ACompactify[x,a] transforms Spinor products of the form \n
...a]  or [a... \n into \n 
[*a] or [a*] 
with slashed matrices into spinor products of only two spinors. For  For example, \nCompactify[[a|P|b>,a] \n returns \n[a,P(b)]\n but leaves \n <a|P|b]\n untouched.
";


SmBA::usage="SmBA[b,a] is a slashed matrix representing the combination\n
|b]<a| + |a>[b|
"
SmBA2::usage="SmBA2[b,a] is a slashed matrix representing the tensor product of the two dimensional spinors CLat[b].CLa[a] 
in the two-dimensional representation.
"
CSmBA2::usage="CSmBA2[b,a] is a slashed matrix representing the tensor product of the two dimensional spinors La[a].Lat[b] 
in the two-dimensional representation.
"

SmBA4::usage="SmBA4[b,a] is a slashed matrix representing  the combination\n
|b]<a| + |a>[b|\n 
in the four-dimensional representation.
"


Sm2::usage="Sm2[P] is the two-dimensional representation or the slashed matrix of the vector P."


Sm4::usage="Sm4[P] is the four-dimensional representation or the slashed matrix of the vector P."


CSm2::usage="CSm2[P] is the two dimensional representation or the slashed matrix of the vector P with both indices contracted with the epsilon tensor."


Begin["`Private`"]


PRINT[x__]:=Print[x];


$SpinorPrecision::lowprecision="A vector has been provided with a lower precision as the current working precision of the Spinor package."


Spab::even="Even number of spinorial objects in Spab[`1`]"


Spba::even="Even number of spinorial objects in Spba[`1`]"


Spaa::odd="Odd number of spinorial objects in Spaa[`1`]"


Spbb::odd="Odd number of spinorial objects in Spbb[`1`]"


Spaa/:MakeBoxes[Spaa[a_,p__,b_],StandardForm]:=FormBox[RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}],TraditionalForm]


Spaa/:MakeBoxes[Spaa[a_,b_],StandardForm]:=FormBox[RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}],TraditionalForm]


Spaa/:MakeBoxes[Spaa[a_,p__,b_],TraditionalForm]:=RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}]


Spaa/:MakeBoxes[Spaa[a_,b_],TraditionalForm]:=RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}]


Spaa[a_Alternatives]:=Spaa@@a


Unprotect[RowBox]; 
MakeExpression[RowBox[{"\[LeftAngleBracket]",p__,"\[RightAngleBracket]"}],TraditionalForm]:=(MakeExpression[RowBox[{"Spaa","[",p,"]"}],TraditionalForm])
MakeExpression[RowBox[{"\[LeftAngleBracket]",RowBox[{p__}],"\[RightAngleBracket]"}],TraditionalForm]:=(If[OddQ[Count[{p},Except["|"]]],Message[Spaa::odd,MakeExpression[RowBox[{p}],StandardForm][[1]]]];MakeExpression[RowBox[{"Spaa","[",RowBox[{p}],"]"}],TraditionalForm])
Protect[RowBox];


Spab/:MakeBoxes[Spab[a_,p__,b_],StandardForm]:=FormBox[RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"]"}],TraditionalForm]


Spab/:MakeBoxes[Spab[a_,b_],StandardForm]:=FormBox[RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"]"}],TraditionalForm]


Spab/:MakeBoxes[Spab[a_,p__,b_],TraditionalForm]:=RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"]"}]


Spab/:MakeBoxes[Spab[a_,b_],TraditionalForm]:=RowBox[{"\[LeftAngleBracket]",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"]"}]


Spab[a_Alternatives]:=Spab@@a


Unprotect[RowBox]; 
(*MakeExpression[RowBox[{"\[LeftAngleBracket]",a_,":",b_,"]"}],TraditionalForm]:=(Message[Spab::even,MakeExpression[a,StandardForm][[1]],MakeExpression[b,StandardForm][[1]]];MakeExpression[RowBox[{"Spab","[",a,",",b,"]"}],TraditionalForm])
MakeExpression[RowBox[{"\[LeftAngleBracket]",RowBox[{a_,":",b_}],"]"}],TraditionalForm]:=(Message[Spab::even,MakeExpression[a,StandardForm][[1]],MakeExpression[b,StandardForm][[1]]];MakeExpression[RowBox[{"Spab","[",a,",",b,"]"}],TraditionalForm])*)
MakeExpression[RowBox[{"\[LeftAngleBracket]",p__,"]"}],TraditionalForm]:=(If[EvenQ[Length[{p}]],Message[Spab::even,MakeExpression[RowBox[{p}],StandardForm][[1]]]];MakeExpression[RowBox[{"Spab","[",p,"]"}],TraditionalForm])
MakeExpression[RowBox[{"\[LeftAngleBracket]",RowBox[{p__}],"]"}],TraditionalForm]:=(If[EvenQ[Count[{p},Except["|"]]],Message[Spab::even,MakeExpression[RowBox[{p}],StandardForm][[1]]]];MakeExpression[RowBox[{"Spab","[",RowBox[{p}],"]"}],TraditionalForm])
MakeExpression[RowBox[{RowBox[{"\[LeftAngleBracket]",RowBox[{p__}]}],"]"}],TraditionalForm]:=MakeExpression[RowBox[{"Spab","[",RowBox[{p}],"]"}],TraditionalForm]

Protect[RowBox];


Spba/:MakeBoxes[Spba[a_,p__,b_],StandardForm]:=FormBox[RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}],TraditionalForm]


Spba/:MakeBoxes[Spba[a_,b_],StandardForm]:=FormBox[RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}],TraditionalForm]


Spba/:MakeBoxes[Spba[a_,p__,b_],TraditionalForm]:=RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}]


Spba/:MakeBoxes[Spba[a_,b_],TraditionalForm]:=RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"\[RightAngleBracket]"}]


Spba[a_Alternatives]:=Spba@@a


Unprotect[RowBox]; 

MakeExpression[RowBox[{"[",p__,"\[RightAngleBracket]"}],TraditionalForm]:=(If[EvenQ[Length[{p}]],Message[Spba::even,MakeExpression[RowBox[{p}],StandardForm][[1]]]];MakeExpression[RowBox[{"Spba","[",p,"]"}],TraditionalForm])
MakeExpression[RowBox[{"[",RowBox[{p__}],"\[RightAngleBracket]"}],TraditionalForm]:=(If[EvenQ[Count[{p},Except["|"]]],Message[Spba::even,MakeExpression[RowBox[{p}],StandardForm][[1]]]];MakeExpression[RowBox[{"Spba","[",RowBox[{p}],"]"}],TraditionalForm])

MakeExpression[RowBox[{RowBox[{"[",RowBox[{p__}]}],"\[RightAngleBracket]"}],TraditionalForm]:=MakeExpression[RowBox[{"Spba","[",RowBox[{p}],"]"}],TraditionalForm]

Protect[RowBox];


Spbb/:MakeBoxes[Spbb[a_,p__,b_],StandardForm]:=FormBox[RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"]"}],TraditionalForm]


Spbb/:MakeBoxes[Spbb[a_,b_],StandardForm]:=FormBox[RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"]"}],TraditionalForm]


Spbb/:MakeBoxes[Spbb[a_,p__,b_],TraditionalForm]:=RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",Sequence@@(Delete[Flatten[{MakeBoxes[#,TraditionalForm],"|"}&/@{p},1],-1]),"|",MakeBoxes[b,TraditionalForm],"]"}]


Spbb/:MakeBoxes[Spbb[a_,b_],TraditionalForm]:=RowBox[{"[",MakeBoxes[a,TraditionalForm],"|",MakeBoxes[b,TraditionalForm],"]"}]


Spbb[a_Alternatives]:=Spbb@@a


Unprotect[RowBox]; 
MakeExpression[RowBox[{"[",p1_,"|",p__,"]"}],TraditionalForm]:=(MakeExpression[RowBox[{"Spbb","[",p1,"|",p,"]"}],TraditionalForm])
MakeExpression[RowBox[{"[",RowBox[{p1_,"|",p__}],"]"}],TraditionalForm]:=(MakeExpression[RowBox[{"Spbb","[",RowBox[{p1,"|",p}],"]"}],TraditionalForm])
Protect[RowBox];


Sp/:MakeBoxes[Sp[a_Integer],TraditionalForm]:=MakeBoxes[a,TraditionalForm]


Sp/:MakeBoxes[Sp[a_Integer],StandardForm]:=MakeBoxes[a,StandardForm]


(*Sm/:MakeBoxes[Sm[a_?SpinorQ],TraditionalForm]:=MakeBoxes[a,TraditionalForm]*)


(*Sm/:MakeBoxes[Sm[a_?SpinorQ],StandardForm]:=MakeBoxes[a,StandardForm]*)


(*Sm2/:MakeBoxes[Sm2[a_],TraditionalForm]:=MakeBoxes[a,TraditionalForm]*)


(*CSm2/:MakeBoxes[CSm2[a_],TraditionalForm]:=MakeBoxes[a,TraditionalForm]*)


(*Sm4/:MakeBoxes[Sm4[a_],TraditionalForm]:=MakeBoxes[a,TraditionalForm]*)


MakeBoxes[s[i_,j__],StandardForm]:=RowBox[{SubscriptBox["s",RowBox[MakeBoxes[#,StandardForm]&/@{i,j}]]}]


MakeBoxes[s[i_,j__],TraditionalForm]:=RowBox[{SubscriptBox["s",RowBox[MakeBoxes[#,TraditionalForm]&/@{i,j}]]}]


MakeExpression[SubscriptBox["s",RowBox[{i_,j__}]],TraditionalForm]:=MakeExpression[RowBox[{"s","[",Sequence@@(Delete[Flatten[{#,","}&/@{i,j},1],-1]),"]"}]]


MakeExpression[SubscriptBox["s",RowBox[{i_,j__}]],StandardForm]:=MakeExpression[RowBox[{"s","[",Sequence@@(Delete[Flatten[{#,","}&/@{i,j},1],-1]),"]"}]]


USpa/:MakeBoxes[USpa[a_],TraditionalForm]:=RowBox[{SubscriptBox["u","+"],"(",MakeBoxes[a,TraditionalForm],")"}]


USpb/:MakeBoxes[USpb[a_],TraditionalForm]:=RowBox[{SubscriptBox["u","-"],"(",MakeBoxes[a,TraditionalForm],")"}]


UbarSpa/:MakeBoxes[UbarSpa[a_],TraditionalForm]:=RowBox[{OverscriptBox[SubscriptBox["u","-"],"_"],"(",MakeBoxes[a,TraditionalForm],")"}]


UbarSpb/:MakeBoxes[UbarSpb[a_],TraditionalForm]:=RowBox[{OverscriptBox[SubscriptBox["u","+"],"_"],"(",MakeBoxes[a,TraditionalForm],")"}]


Unprotect[RowBox]; MakeExpression[RowBox[{OverscriptBox[SubscriptBox["u","+"],"_"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"UbarSpb","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{OverscriptBox[SubscriptBox["u","-"],"_"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"UbarSpa","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{SubscriptBox["u","-"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"USpb","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{SubscriptBox["u","+"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"USpa","[",a,"]"}],TraditionalForm];
Protect[RowBox];


La/:MakeBoxes[La[a_],TraditionalForm]:=RowBox[{"\[Lambda]","(",MakeBoxes[a,TraditionalForm],")"}]


Lat/:MakeBoxes[Lat[a_],TraditionalForm]:=RowBox[{\!\(TraditionalForm\`OverscriptBox["\<\[Lambda]\>", "\<~\>"]\),"(",MakeBoxes[a,TraditionalForm],")"}]


CLa/:MakeBoxes[CLa[a_],TraditionalForm]:=RowBox[{UnderscriptBox["\[Lambda]","_"],"(",MakeBoxes[a,TraditionalForm],")"}]


CLat/:MakeBoxes[CLat[a_],TraditionalForm]:=RowBox[{UnderscriptBox[OverscriptBox["\[Lambda]","~"],"_"],"(",MakeBoxes[a,TraditionalForm],")"}]


Unprotect[RowBox];

MakeExpression[RowBox[{OverscriptBox["\[Lambda]","~"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"Lat","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{"\[Lambda]","(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"La","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{UnderscriptBox["\[Lambda]","_"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"CLa","[",a,"]"}],TraditionalForm];

MakeExpression[RowBox[{UnderscriptBox[OverscriptBox["\[Lambda]","~"],"_"],"(",a_,")"}],TraditionalForm]:=MakeExpression[RowBox[{"CLat","[",a,"]"}],TraditionalForm];

Protect[RowBox];


(*SmBA/:MakeBoxes[SmBA[a_,b_],StandardForm]:=FormBox[RowBox[{"\[VerticalLine]",MakeBoxes[a,TraditionalForm],"]\[LeftAngleBracket]",MakeBoxes[b,TraditionalForm],"\[VerticalLine]"}],TraditionalForm]
SmBA/:MakeBoxes[SmBA[a_,b_],TraditionalForm]:=RowBox[{"\[VerticalLine]",MakeBoxes[a,TraditionalForm],"]\[LeftAngleBracket]",MakeBoxes[b,TraditionalForm],"\[VerticalLine]"}]
Unprotect[RowBox];
 
MakeExpression[RowBox[{"\[VerticalBar]",a_,"]\[LeftAngleBracket]",b_,"\[VerticalBar]"}],TraditionalForm]:=(MakeExpression[RowBox[{"SmBA","[",a,",",b,"]"}],TraditionalForm])
MakeExpression[RowBox[{"\[VerticalLine]",a_,RowBox[{"]","\[LeftAngleBracket]"}],b_,"\[VerticalLine]"}],TraditionalForm]:=(MakeExpression[RowBox[{"SmBA","[",a,",",b,"]"}],TraditionalForm])
Protect[RowBox];*)


Gamma0/:MakeBoxes[Gamma0,TraditionalForm]:=RowBox[{SubscriptBox["\[Gamma]","0"]}]
Gamma1/:MakeBoxes[Gamma1,TraditionalForm]:=RowBox[{SubscriptBox["\[Gamma]","1"]}]
Gamma2/:MakeBoxes[Gamma2,TraditionalForm]:=RowBox[{SubscriptBox["\[Gamma]","2"]}]
Gamma3/:MakeBoxes[Gamma3,TraditionalForm]:=RowBox[{SubscriptBox["\[Gamma]","3"]}]
Gamma5/:MakeBoxes[Gamma5,TraditionalForm]:=RowBox[{SubscriptBox["\[Gamma]","5"]}]

ProjPlus/:MakeBoxes[ProjPlus,TraditionalForm]:=RowBox[{SubscriptBox["P","+"]}]
ProjMinus/:MakeBoxes[ProjMinus,TraditionalForm]:=RowBox[{SubscriptBox["P","-"]}]


DeclareLVector[s__]:=(LVectorList:=Evaluate[Alternatives[s,LVectorList]//Flatten//Union];PRINT[{s} ," added to the list of Lorentz vectors"])


UndeclareLVector[s_]:=(LVectorList:=Evaluate[DeleteCases[LVectorList,s]];PRINT[s ," removed from the list of Lorentz vectors"])


LVectorList:=_Sp|_Dot[__]|_?SMatrixQ[_]


LVectorList=(_Sp)|_?SpinorQ


LVectorQ[x_]:=If[MatchQ[x,LVectorList],True,False];


NumVectorList={};


SetAttributes[MP,Orderless]


MP[p1_Plus,p2_]:=MP[#,p2]&/@p1
MP[p2_,coeff__ p1_?LVectorQ]:=coeff MP[p1,p2]
MP[p1_,coeff__?(FreeQ[#,_?LVectorQ]&) p_Plus]:=coeff MP[p1,p]
MP2[p_]:=MP[p,p]


MP[a___,i_Integer,b___]:=MP[a,Sp[i],b]
MP2[i_Integer]:=MP2[Sp[i]]
MP[x_?SpinorQ,x_]:=0;


MP[v1:{_,_,_,_},v2:{_,_,_,_}]:=v1[[1]] v2[[1]]-v1[[2]] v2[[2]]-v1[[3]] v2[[3]]-v1[[4]] v2[[4]]


DeclareSpinor[s__]:=(SpinorList:=Evaluate[Alternatives[s,SpinorList]//Flatten//Union];PRINT[{s} ," added to the list of spinors"])


UndeclareSpinor[s_]:=(SpinorList:=Evaluate[DeleteCases[SpinorList,s]];PRINT[s ," removed to the list of spinors"])


SpinorList:=_Sp|_Dot[__]|_?SMatrixQ[_]


SpinorQ[x_]:=If[MatchQ[x,SpinorList],True,False]


PureSpinorQ[x_]:=If[MatchQ[x,SpinorList]&&!MatchQ[x,_Dot[__]|_?SMatrixQ[_]],True,False]


DeclareSMatrix[s__]:=(SMatrixList:=Evaluate[Alternatives[s,SMatrixList]//Flatten//Union];PRINT[{s} ," added to the list of slashed matrices"])


UndeclareSMatrix[s_]:=(SMatrixList:=Evaluate[DeleteCases[SMatrixList,s]];PRINT[s ," removed to the List of slashed matrices"])


SetAttributes[Sm,{NHoldAll}]


SMatrixList:=_Sm|_SmBA|_?(SpinorQ[#]&)|_?(LVectorQ[#]&)|Gamma0|Gamma1|Gamma2|Gamma3|Gamma5


SMatrixQ[x_]:=If[MatchQ[x,SMatrixList],True,False]


Spaa::wrongNbrSM="Wrong number of slashed matrices in the <...> product . Automatically changed to <...]";


Spab::wrongNbrSM="Wrong number of slashed matrices in the <...] product . Automatically changed to <...>";


Spba::wrongNbrSM="Wrong number of slashed matrices in the [...> product . Automatically changed to [...]";


Spbb::wrongNbrSM="Wrong number of slashed matrices in the [...] product . Automatically changed to <...]";


Spaa[a_?SpinorQ,p___,b_?SpinorQ]:=(Message[Spaa::wrongNbrSM];FSpAab[a,p,b])/;OddQ[NbrDM[p]]
Spbb[a_?SpinorQ,p___,b_?SpinorQ]:=(Message[Spbb::wrongNbrSM];FSpBab[a,p,b])/;OddQ[NbrDM[p]]
Spab[a_?SpinorQ,p___,b_?SpinorQ]:=(Message[Spab::wrongNbrSM];FSpAab[a,p,b])/;EvenQ[NbrDM[p]]
Spba[a_?SpinorQ,p___,b_?SpinorQ]:=(Message[Spba::wrongNbrSM];FSpBab[a,p,b])/;EvenQ[NbrDM[p]]


Sm[i_Integer]:=Sm[Sp[i]];


Unprotect[Dot]


Dot[d1___,p_Plus,d2___]:=Dot[d1,#,d2]&/@p/;$SpinorAutoExpand
Dot[la1___,coeff__ la2:((La|Lat|CLa|CLat|USpa|USpb|UbarSpa|UbarSpb)[_?SpinorQ]|_?SMatrixQ|_Dot|_Sm2|_CSm2|_Sm4|_SmBA4),la3___]:=coeff (la1.la2.la3)


Dot[aa___,lat:(Lat[_?SpinorQ]|CSm2[_?SMatrixQ]), clat:CLat[_?SpinorQ], cla:CLa[_?SpinorQ],la:(La[_?SpinorQ]|CSm2[_?SpinorQ]),bb___]:=
Dot[aa,lat,clat] Dot[cla,la,bb]
Dot[aa___,cla:(CLa[_?SpinorQ]|Sm2[_?SMatrixQ]), la:La[_?SpinorQ], lat:Lat[_?SpinorQ],clat:(CLat[_?SpinorQ]|Sm2[_?SpinorQ]),bb___]:=
Dot[aa,cla,la] Dot[lat,clat,bb]


CLat[a_?SpinorQ].Lat[b_?SpinorQ]:=Lat[b].CLat[a]
La[a_?SpinorQ].CLa[b_?SpinorQ]:=CLa[b].La[a]

Dot[CLat[b_?SpinorQ],sms___,la:Lat[a_?SpinorQ]]:=Dot[la,Sequence@@Reverse[{sms}],CLat[b]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]]

Dot[CLat[b_?SpinorQ],sms___,cla:CLa[a_?SpinorQ]]:=Dot[cla,Sequence@@Reverse[{sms}],CLat[b]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]]

Dot[La[b_?SpinorQ],sms___,cla:CLa[a_?SpinorQ]]:=Dot[cla,Sequence@@Reverse[{sms}],La[b]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]

Dot[La[b_?SpinorQ],sms___,lat:Lat[a_?SpinorQ]]:=Dot[lat,Sequence@@Reverse[{sms}],La[b]]/;RightSM2Order[{sms}]&&OddQ[Length[{sms}]]


USpa[a_?SpinorQ].UbarSpa[b_?SpinorQ]:=UbarSpa[b].USpa[a]
USpb[a_?SpinorQ].UbarSpb[b_?SpinorQ]:=UbarSpb[b].USpb[a]



Dot[u:(USpb|USpa)[b_?SpinorQ],sms__Sm4,ub:(UbarSpa|UbarSpb)[a_?SpinorQ]]:=Dot[ub,Sequence@@Reverse[{sms}],u]


NumSm2Q[Sm2[_?NumSMatrixQ]]=True
NumSm2Q[CSm2[_?NumSMatrixQ]]=True
NumSm2Q[_]=False


NumSm4Q[Sm4[_?NumSMatrixQ]]=True
NumSm4Q[_]=False


N[Dot[Lat[b_?NumSpinorQ],CLat[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[(NumLat[b].NumCLat[a])[[1,1]],p]
N[d:Dot[Lat[b_?NumSpinorQ],sms__?NumSm2Q,La[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;RightSM2Order[{sms}]&&OddQ[Length[{sms}]]

N[d:Dot[Lat[b_?NumSpinorQ],sms__?NumSm2Q,CLat[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]


N[Dot[CLa[b_?NumSpinorQ],la:La[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[NumCLa[b].NumLa[a],p])[[1,1]]
N[d:Dot[CLa[b_?NumSpinorQ],sms__?NumSm2Q,CLat[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]]

N[d:Dot[CLa[b_?NumSpinorQ],sms__?NumSm2Q,La[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]]


N[Dot[UbarSpa[b_?NumSpinorQ],USpa[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[(NumCLa[b].NumLa[a])[[1,1]],p]


N[Dot[UbarSpb[b_?NumSpinorQ],USpb[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[(NumLat[b].NumCLat[a])[[1,1]],p]


N[d:Dot[UbarSpa[b_?NumSpinorQ],sms__?NumSm4Q,USpa[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;EvenQ[Length[{sms}]]
N[d:Dot[UbarSpa[b_?NumSpinorQ],sms__?NumSm4Q,USpb[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;OddQ[Length[{sms}]]
N[d:Dot[UbarSpb[b_?NumSpinorQ],sms__?NumSm4Q,USpb[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[#,p]&/@d)[[1,1]]/;EvenQ[Length[{sms}]]


Protect[Dot]


SetAttributes[s,Orderless]


s[b___,i_Integer,a___]:=s[b,Sp[i],a]
s[x_?SpinorQ,x_]:=0;


Spaa[a_Integer?Positive,v___,b_]:=Spaa[Sp[a],v,b]
Spaa[a_,v___,b_Integer?Positive]:=Spaa[a,v,Sp[b]]
Spaa[a_,v___,m_Integer?Positive,n___,b_]:=Spaa[a,v,Sp[m],n,b]
Spaa[a_,v___,Sm[P_?SMatrixQ],n___,b_]:=Spaa[a,v,P,n,b]


Spab[a_Integer?Positive,v___,b_]:=Spab[Sp[a],v,b]
Spab[a_,v___,b_Integer?Positive]:=Spab[a,v,Sp[b]]
Spab[a_,v___,m_Integer?Positive,n___,b_]:=Spab[a,v,Sp[m],n,b]
Spab[a_,v___,Sm[P_?SMatrixQ],n___,b_]:=Spab[a,v,P,n,b]


Spba[a_Integer?Positive,v___,b_]:=Spba[Sp[a],v,b]
Spba[a_,v___,b_Integer?Positive]:=Spba[a,v,Sp[b]]
Spba[a_,v___,m_Integer?Positive,n___,b_]:=Spba[a,v,Sp[m],n,b]
Spba[a_,v___,Sm[P_?SMatrixQ],n___,b_]:=Spba[a,v,P,n,b]


Spbb[a_Integer?Positive,v___,b_]:=Spbb[Sp[a],v,b]
Spbb[a_,v___,b_Integer?Positive]:=Spbb[a,v,Sp[b]]
Spbb[a_,v___,m_Integer?Positive,n___,b_]:=Spbb[a,v,Sp[m],n,b]
Spbb[a_,v___,Sm[P_?SMatrixQ],n___,b_]:=Spbb[a,v,P,n,b]


Sm[i_Integer]:=Sm[Sp[i]];


SmBA[a___,i_Integer,b___]:=SmBA[a,Sp[i],b]
SmBA2[a___,i_Integer,b___]:=SmBA2[a,Sp[i],b]
CSmBA2[a___,i_Integer,b___]:=CSmBA2[a,Sp[i],b]
SmBA4[a___,i_Integer,b___]:=SmBA4[a,Sp[i],b]


SmBA[a_?SpinorQ,a_?SpinorQ]:=Sm[a]
SmBA2[a_?SpinorQ,a_?SpinorQ]:=Sm2[a]
CSmBA2[a_?SpinorQ,a_?SpinorQ]:=CSm2[a]
SmBA4[a_?SpinorQ,a_?SpinorQ]:=Sm4[a]


Spaa[a_,aa___?SMatrixQ,SmBA[B_?SpinorQ,A_?SpinorQ],bb__]:=If[EvenQ[Length[{aa}]],Spaa[a,aa,A] Spba[B,bb],Spab[a,aa,B] Spaa[A,bb]]
Spaa[aa__,SmBA[B_?SpinorQ,A_?SpinorQ],bb___,b_?SpinorQ]:=If[EvenQ[Length[{bb}]],Spab[aa,B] Spaa[A,bb,b],Spaa[aa,A] Spba[B,bb,b]]


Spbb[a_,aa___?SMatrixQ,SmBA[B_?SpinorQ,A_?SpinorQ],bb__]:=If[EvenQ[Length[{aa}]],Spbb[a,aa,B] Spab[A,bb],Spba[a,aa,A] Spbb[B,bb]]
Spbb[aa__,SmBA[B_?SpinorQ,A_?SpinorQ],bb___,b_?SpinorQ]:=If[EvenQ[Length[{bb}]],Spba[aa,A] Spbb[B,bb,b],Spbb[aa,B] Spab[A,bb,b]]


Spab[a_,aa___?SMatrixQ,SmBA[B_?SpinorQ,A_?SpinorQ],bb__]:=If[EvenQ[Length[{aa}]],Spaa[a,aa,A] Spbb[B,bb],Spab[a,aa,B] Spab[A,bb]]
Spab[aa__,SmBA[B_?SpinorQ,A_?SpinorQ],bb___,b_?SpinorQ]:=If[EvenQ[Length[{bb}]],Spaa[aa,A] Spbb[B,bb,b],Spab[aa,B] Spab[A,bb,b]]


Spba[a_,aa___?SMatrixQ,SmBA[B_?SpinorQ,A_?SpinorQ],bb__]:=If[EvenQ[Length[{aa}]],Spbb[a,aa,B] Spaa[A,bb],Spba[a,aa,A] Spba[B,bb]]
Spba[aa__,SmBA[B_?SpinorQ,A_?SpinorQ],bb___,b_?SpinorQ]:=If[EvenQ[Length[{bb}]],Spbb[aa,B] Spaa[A,bb,b],Spba[aa,A] Spba[B,bb,b]]


SmBA[b_Plus,a_]:=SmBA[#,a]&/@b
SmBA[b_,a_Plus]:=SmBA[b,#]&/@a
SmBA[b_,c__ a_?SpinorQ]:=c SmBA[b,a]
SmBA[c__ b_?SpinorQ,a_]:=c SmBA[b,a]


SmBA2[b_Plus,a_]:=SmBA2[#,a]&/@b
SmBA2[b_,a_Plus]:=SmBA2[b,#]&/@a
SmBA2[b_,c__ a_?SpinorQ]:=c SmBA2[b,a]
SmBA2[c__ b_?SpinorQ,a_]:=c SmBA2[b,a]

CSmBA2[b_Plus,a_]:=CSmBA2[#,a]&/@b
CSmBA2[b_,a_Plus]:=CSmBA2[b,#]&/@a
CSmBA2[b_,c__ a_?SpinorQ]:=c CSmBA2[b,a]
CSmBA2[c__ b_?SpinorQ,a_]:=c CSmBA2[b,a]


SmBA4[b_Plus,a_]:=SmBA4[#,a]&/@b
SmBA4[b_,a_Plus]:=SmBA4[b,#]&/@a
SmBA4[b_,c__ a_?SpinorQ]:=c SmBA4[b,a]
SmBA4[c__ b_?SpinorQ,a_]:=c SmBA4[b,a]


Unprotect[Dot];Dot[aa___,lat:(Lat[_?SpinorQ]|CSm2[_?SMatrixQ]),SmBA2[B_?SpinorQ,A_?SpinorQ],la:(La[_?SpinorQ]|CSm2[_?SMatrixQ]),bb___]:=Dot[aa,lat,CLat[B]] Dot[CLa[A],la,bb]

Dot[aa___,la:(La[_?SpinorQ]|CSm2[_?SMatrixQ]),SmBA2[B_?SpinorQ,A_?SpinorQ],lat:(Lat[_?SpinorQ]|CSm2[_?SMatrixQ]),bb___]:=Dot[aa,la,CLa[A]] Dot[CLat[B],lat,bb]

Dot[aa___,Cla:(CLa[_?SpinorQ]|Sm2[_?SMatrixQ]),CSmBA2[B_?SpinorQ,A_?SpinorQ],Clat:(CLat[_?SpinorQ]|Sm2[_?SMatrixQ]),bb___]:=Dot[aa,Cla,La[A]] Dot[Lat[B],Clat,bb]

Dot[aa___,Clat:(CLat[_?SpinorQ]|Sm2[_?SMatrixQ]),CSmBA2[B_?SpinorQ,A_?SpinorQ],Cla:(CLa[_?SpinorQ]|Sm2[_?SMatrixQ]),bb___]:=Dot[aa,Clat,Lat[B]] Dot[La[A],Cla,bb]


Dot[ub:UbarSpa[a_?SpinorQ],aa___Sm4,SmBA4[B_?SpinorQ,A_?SpinorQ],bb__]:=Switch[Length[{aa}],_?EvenQ,Dot[ub,aa,USpa[A]] Dot[UbarSpb[B],bb],_?OddQ,Dot[ub,aa,USpb[B]] Dot[UbarSpa[A],bb]]

Dot[aa__,SmBA4[B_?SpinorQ,A_?SpinorQ],bb___Sm4,u:USpa[b_?SpinorQ]]:=Switch[Length[{bb}],_?EvenQ,Dot[aa,USpb[B]] Dot[UbarSpa[A],bb,u],_?OddQ,Dot[aa,USpa[A]] Dot[UbarSpb[B],bb]]


Dot[ub:UbarSpb[a_?SpinorQ],aa___Sm4,SmBA4[B_?SpinorQ,A_?SpinorQ],bb__]:=Switch[Length[{aa}],_?OddQ,Dot[ub,aa,USpa[A]] Dot[UbarSpb[B],bb],_?EvenQ,Dot[ub,aa,USpb[B]] Dot[UbarSpa[A],bb]]

Dot[aa__,SmBA4[B_?SpinorQ,A_?SpinorQ],bb___Sm4,u:USpb[b_?SpinorQ]]:=Switch[Length[{bb}],_?EvenQ,Dot[aa,USpa[A]] Dot[UbarSpb[B],bb,u],_?OddQ,Dot[aa,USpb[B]] Dot[UbarSpa[A],bb]]

Protect[Dot];


N[SmBA2[b_?NumSpinorQ,a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumCLat[b].NumCLa[a],p]
N[CSmBA2[b_?NumSpinorQ,a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumLa[a].NumLat[b],p]
N[SmBA4[b_?NumSpinorQ,a_?NumSpinorQ],p_:$MachinePrecision]:=N[USpb[b].UbarSpa[a]+USpa[a].UbarSpb[b],p]


SpinProd=Spaa|Spab|Spba|Spbb
SpinProdIntern=Spaa|Spab|Spba|Spbb|Sptemp


SpinorExpand[(sp:SpinProdIntern)[b___,p1_Plus,a___]]:=SpinorExpand[sp[b,#,a]]&/@p1

SpinorExpand[(sp:SpinProdIntern)[p2__,coeff__ p1_?SpinorQ]]:=coeff SpinorExpand[sp[p1,p2]]
SpinorExpand[(sp:SpinProdIntern)[coeff__ p1_?SpinorQ,p2__]]:=coeff SpinorExpand[sp[p1,p2]]

SpinorExpand[(sp:SpinProdIntern)[p1_,b___,coeff__ sm_?SMatrixQ,a___,p2_]]:=coeff SpinorExpand[sp[p1,b,sm,a,p2]]

SpinorExpand[(sp:SpinProdIntern)[p1__,coeff__ p2_?SpinorQ]]:=coeff sp[p1,p2]
SpinorExpand[(sp:SpinProdIntern)[p1__,coeff__?(Not[MatchQ[#,_?SpinorQ]]&) p_Plus]]:=coeff sp[p1,p]
SpinorExpand[(sp:SpinProdIntern)[coeff__?(Not[MatchQ[#,_?SpinorQ]]&) p_Plus,p2__]]:=coeff sp[p1,p2]
SpinorExpand[(sp:SpinProdIntern)[coeff__?(Not[MatchQ[#,_?SpinorQ]]&) p_Plus,p2__]]:=coeff sp[p,p2]


SpinorExpand[x_]:=x/.{s:(SpinProdIntern)[___,_Plus,___]:>SpinorExpand[s],s:(SpinProdIntern)[___,coeff__?(FreeQ[#,_?SMatrixQ]&) _?SMatrixQ,___]:>SpinorExpand[s],s:(SpinProdIntern)[___,coeff__?(Not[MatchQ[#,_?SpinorQ]]&) _?SpinorQ,___]:>SpinorExpand[s]}


ToBeExpandedExtern:=_Plus|coeff__?(Not[MatchQ[#,_?SpinorQ]]&) _?SpinorQ


ToBeExpandedIntern:=_Plus|coeff__?(FreeQ[#,_SMatrixQ]&) _?SMatrixQ|coeff__?(Not[MatchQ[#,_?SpinorQ]]&) _?SpinorQ


Spaa[b__,p:ToBeExpandedIntern,a__]:=(SpinorExpand[Sptemp[b,p,a]]/.Sptemp->Spaa)/;$SpinorAutoExpand
Spab[b__,p:ToBeExpandedIntern,a__]:=(SpinorExpand[Sptemp[b,p,a]]/.Sptemp->Spab)/;$SpinorAutoExpand
Spba[b__,p:ToBeExpandedIntern,a__]:=(SpinorExpand[Sptemp[b,p,a]]/.Sptemp->Spba)/;$SpinorAutoExpand
Spbb[b__,p:ToBeExpandedIntern,a__]:=(SpinorExpand[Sptemp[b,p,a]]/.Sptemp->Spbb)/;$SpinorAutoExpand


Spaa[p:ToBeExpandedExtern,a___]:=(SpinorExpand[Sptemp[p,a]]/.Sptemp->Spaa)/;$SpinorAutoExpand
Spab[p:ToBeExpandedExtern,a___]:=(SpinorExpand[Sptemp[p,a]]/.Sptemp->Spab)/;$SpinorAutoExpand
Spba[p:ToBeExpandedExtern,a___]:=(SpinorExpand[Sptemp[p,a]]/.Sptemp->Spba)/;$SpinorAutoExpand
Spbb[p:ToBeExpandedExtern,a___]:=(SpinorExpand[Sptemp[p,a]]/.Sptemp->Spbb)/;$SpinorAutoExpand
Spaa[b___,p:ToBeExpandedExtern]:=(SpinorExpand[Sptemp[b,p]]/.Sptemp->Spaa)/;$SpinorAutoExpand
Spab[b___,p:ToBeExpandedExtern]:=(SpinorExpand[Sptemp[b,p]]/.Sptemp->Spab)/;$SpinorAutoExpand
Spba[b___,p:ToBeExpandedExtern]:=(SpinorExpand[Sptemp[b,p]]/.Sptemp->Spba)/;$SpinorAutoExpand
Spbb[b___,p:ToBeExpandedExtern]:=(SpinorExpand[Sptemp[b,p]]/.Sptemp->Spbb)/;$SpinorAutoExpand


$SpinorAutoExpand=True


ExpandSToSpinors[x_]:=x//.{s[i_,j_]:>Spaa[i,j] Spbb[j,i],s[i:((_?SpinorQ|_Integer)..)]:>Plus@@((Spaa[#[[1]],#[[2]]] Spbb[#[[2]],#[[1]]])&/@Union[Sort/@Tuples[{i},2]] )}


ConvertSpinorsToS[x_]:= x//.{Spaa[i_?SpinorQ,j_?SpinorQ]^n1_. Spbb[j_,i_]^n2_.:>s[i,j] Spaa[i,j]^(n1-1) Spbb[j,i]^(n2-1)/;n1>0&&n2>0,Spaa[i_?SpinorQ,j_?SpinorQ]^n1_. Spbb[j_,i_]^n2_.:>s[i,j]^(-1) Spaa[i,j]^(n1+1) Spbb[j,i]^(n2+1)/;n1<0&&n2<0,(*Spab[a_?SpinorQ,b_Sm,a_]:>s[a,Sp[b[[1]]]]*)Spab[a_?SpinorQ,b_?SpinorQ,a_]:>s[a,b](*(sp:(Spaa|Spab|Spbb))[Sp[i_Integer],b_Sm,Sm[i_],rest___]:>s[Sp[i],Sp[b[[1]]]] sp[Sp[i],rest],(sp:(Spaa|Spab|Spbb))[rest___,Sm[i_Integer],b_Sm,Sp[i_]]:>s[Sp[i],Sp[b[[1]]]] sp[rest,Sp[i]],

(sp:(Spaa|Spab|Spbb))[a_SpinorQ,b_Sm,a_,rest___]:>s[a,Sp[b[[1]]]] sp[a,rest],(sp:(Spaa|Spab|Spbb))[rest___,a_?SpinorQ,b_Sm,a_]:>s[a,Sp[b[[1]]]] sp[rest,a]*),

(sp:(Spaa|Spab|Spbb))[a_?SpinorQ,b_?SpinorQ,a_,rest___]:>s[a,b] sp[a,rest],(sp:(Spaa|Spab|Spbb))[rest___,a_?SpinorQ,b_?SpinorQ,a_]:>s[a,b] sp[rest,a]}//.{(CLa[a_?SpinorQ].La[b_?SpinorQ]) ^n1_.(Lat[b_?SpinorQ].CLat[a_?SpinorQ])^n2_.:>s[a,b] (CLa[a].La[b]) ^(n1-1)(Lat[b].CLat[a])^(n2-1)/;n1>0&&n2>0,(CLa[a_?SpinorQ].La[b_?SpinorQ]) ^n1_.(Lat[b_?SpinorQ].CLat[a_?SpinorQ])^n2_.:>1/s[a,b] (CLa[a].La[b]) ^(n1+1)(Lat[b].CLat[a])^(n2+1)/;n1<0&&n2<0,Lat[a_?SpinorQ].Sm2[b_?SpinorQ] .La[a_]:>s[a,b],Dot[CLa[a_?SpinorQ],CSm2[b_?SpinorQ],Sm2[a_],rest__]:>s[a,b] Dot[CLa[a],rest],Dot[Lat[a_?SpinorQ],Sm2[b_?SpinorQ],CSm2[a_],rest__]:>s[a,b] Dot[Lat[a],rest],
Dot[rest__,Sm2[a_?SpinorQ],CSm2[b_?SpinorQ],CLat[a_?SpinorQ]]:>s[a,b] Dot[rest,CLat[a]],
Dot[rest__,CSm2[a_?SpinorQ],Sm2[b_],La[a_?SpinorQ]]:>s[a,b] Dot[rest,La[a]]
}//.{(P1:(UbarSpa[a_?SpinorQ].USpa[b_?SpinorQ])) ^n1_.(P2:(UbarSpb[b_?SpinorQ].USpb[a_?SpinorQ]))^n2_.:>s[a,b] (P1) ^(n1-1)(P2)^(n2-1)/;n1>0&&n2>0,(P1:(UbarSpa[a_?SpinorQ].USpa[b_?SpinorQ])) ^n1_.(P2:(UbarSpb[b_?SpinorQ].USpb[a_?SpinorQ]))^n2_.:>1/s[a,b] (P1) ^(n1+1)(P2)^(n2+1)/;n1<0&&n2<0,UbarSpa[a_?SpinorQ].Sm4[b_?SpinorQ] .USpb[a_]:>s[a,b],

Dot[UbarSpa[a_?SpinorQ],Sm4[b_?SpinorQ],Sm4[a_],rest__]:>s[a,b] Dot[UbarSpa[a],rest],Dot[UbarSpb[a_?SpinorQ],Sm4[b_?SpinorQ],Sm4[a_],rest__]:>s[a,b] Dot[UbarSpb[a],rest],
Dot[rest__,Sm4[a_?SpinorQ],Sm4[b_?SpinorQ],USpb[a_?SpinorQ]]:>s[a,b] Dot[rest,USpb[a]],
Dot[rest__,Sm4[a_?SpinorQ],Sm4[b_],USpa[a_?SpinorQ]]:>s[a,b] Dot[rest,USpa[a]]
}


Schouten::nonspinor="Argument `1` of Schouten[...] should be a spinor."


Schouten[x_,b___,n_Integer,a___]:=Schouten[x,b,Sp[n],a]


Schouten[x_,___,y_?(Not[SpinorQ[#]]&),___]:=(Message[Schouten::nonspinor,y];Return[$Failed])


Schouten4Arule[i_,j_,k_,l_]:={(Spaa[i,j])^n1_. (Spaa[k,l])^n2_.:>(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[j,i])^n1_. (Spaa[k,l])^n2_.:>(-1)^n1 (Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[j,i])^n1_. (Spaa[l,k])^n2_.:>(-1)^(n1+n2)(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[i,j])^n1_. (Spaa[l,k])^n2_.:>(-1)^(n2)(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,
(CLa[i].La[j])^n1_. (CLa[k].La[l])^n2_.:>(-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[i].La[j])^(n1-Min[n1,n2]) (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[j].La[i])^n1_. (CLa[k].La[l])^n2_.:>(-1)^n1 (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[j].La[i])^n1_. (CLa[l].La[k])^n2_.:>(-1)^(n1+n2) (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[i].La[j])^n1_. (CLa[l].La[k])^n2_.:>(-1)^n2 (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0
,(UbarSpa[i].USpa[j])^n1_. (UbarSpa[k].USpa[l])^n2_.:>(UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpa[i].USpa[j])^n1_. (UbarSpa[k].USpa[l])^n2_.:>(-1)^n1 (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpa[i].USpa[j])^n1_. (-UbarSpa[k].USpa[l])^n2_.:>(-1)^(n1+n2) (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpa[i].USpa[j])^n1_. (-UbarSpa[k].USpa[l])^n2_.:>(-1)^n2 (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0}


Schouten4Brule[i_,j_,k_,l_]:={(Spbb[i,j])^n1_. (Spbb[k,l])^n2_.:>(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[j,i])^n1_. (Spbb[k,l])^n2_.:>(-1)^n1 (Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[j,i])^n1_. (Spbb[l,k])^n2_.:>(-1)^(n1+n2)(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[i,j])^n1_. (Spbb[l,k])^n2_.:>(-1)^(n2)(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[i].CLat[j])^n1_. (Lat[k].CLat[l])^n2_.:>(-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[j].CLat[i])^n1_. (Lat[k].CLat[l])^n2_.:>(-1)^n1 (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[j].CLat[i])^n1_. (Lat[l].CLat[k])^n2_.:>(-1)^(n1+n2) (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[i].CLat[j])^n1_. (Lat[l].CLat[k])^n2_.:>(-1)^n2 (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpb[j].USpb[i])^n1_. (-UbarSpb[l].USpb[k])^n2_.:>(UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpb[j].USpb[i])^n1_. (-UbarSpb[l].USpb[k])^n2_.:>(-1)^n1 (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpb[j].USpb[i])^n1_. (UbarSpb[l].USpb[k])^n2_.:>(-1)^(n1+n2) (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpb[j].USpb[i])^n1_. (UbarSpb[l].USpb[k])^n2_.:>(-1)^n2 (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0}


ASchouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ,l_?SpinorQ]:=x//.Schouten4Arule[i,j,k,l]
BSchouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ,l_?SpinorQ]:=x//.Schouten4Brule[i,j,k,l]
Schouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ,l_?SpinorQ]:=x//.Schouten4Arule[i,j,k,l]//.Schouten4Brule[i,j,k,l]


Schouten3Brule[i_,j_,k_]:={(Spbb[i,j])^n1_. (Spbb[k,l_])^n2_.:>(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[j,i])^n1_. (Spbb[k,l_])^n2_.:>(-1)^n1 (Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[j,i])^n1_. (Spbb[l_,k])^n2_.:>(-1)^(n1+n2)(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spbb[i,j])^n1_. (Spbb[l_,k])^n2_.:>(-1)^(n2)(Spbb[i,k] Spbb[j,l]+Spbb[i,l] Spbb[k,j])^Min[n1,n2] (Spbb[i,j])^(n1-Min[n1,n2]) (Spbb[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[i].CLat[j])^n1_. (Lat[k].CLat[l_])^n2_.:>(-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[j].CLat[i])^n1_. (Lat[k].CLat[l_])^n2_.:>(-1)^n1 (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[j].CLat[i])^n1_. (Lat[l_].CLat[k])^n2_.:>(-1)^(n1+n2) (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(Lat[i].CLat[j])^n1_. (Lat[l_].CLat[k])^n2_.:>(-1)^n2 (-Lat[j].CLat[i])^(n1-Min[n1,n2]) (-Lat[k].CLat[j] Lat[l].CLat[i]+Lat[k].CLat[i] Lat[l].CLat[j])^Min[n1,n2] (-Lat[l].CLat[k])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpb[j].USpb[i])^n1_. (-UbarSpb[l_].USpb[k])^n2_.:>(UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpb[j].USpb[i])^n1_. (-UbarSpb[l_].USpb[k])^n2_.:>(-1)^n1 (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpb[j].USpb[i])^n1_. (UbarSpb[l_].USpb[k])^n2_.:>(-1)^(n1+n2) (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpb[j].USpb[i])^n1_. (UbarSpb[l_].USpb[k])^n2_.:>(-1)^n2 (UbarSpb[i].USpb[k] UbarSpb[j].USpb[l]+UbarSpb[i].USpb[l] UbarSpb[k].USpb[j])^Min[n1,n2] (UbarSpb[i].USpb[j])^(n1-Min[n1,n2]) (UbarSpb[k].USpb[l])^(n2-Min[n1,n2])/;n2>0&&n1>0}


Schouten3Arule[i_,j_,k_]:={(Spaa[i,j])^n1_. (Spaa[k,l_])^n2_.:>(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[j,i])^n1_. (Spaa[k,l_])^n2_.:>(-1)^n1 (Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[j,i])^n1_. (Spaa[l_,k])^n2_.:>(-1)^(n1+n2)(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,

(Spaa[i,j])^n1_. (Spaa[l_,k])^n2_.:>(-1)^(n2)(Spaa[i,k] Spaa[j,l]+Spaa[i,l] Spaa[k,j])^Min[n1,n2] (Spaa[i,j])^(n1-Min[n1,n2]) (Spaa[k,l])^(n2-Min[n1,n2])/;n2>0&&n1>0,
(CLa[i].La[j])^n1_. (CLa[k].La[l_])^n2_.:>(-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[i].La[j])^(n1-Min[n1,n2]) (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[j].La[i])^n1_. (CLa[k].La[l_])^n2_.:>(-1)^n1 (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[j].La[i])^n1_. (CLa[l_].La[k])^n2_.:>(-1)^(n1+n2) (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(CLa[i].La[j])^n1_. (CLa[l_].La[k])^n2_.:>(-1)^n2 (CLa[i].La[j])^(n1-Min[n1,n2]) (-CLa[i].La[l] CLa[j].La[k]+CLa[i].La[k] CLa[j].La[l])^Min[n1,n2] (CLa[k].La[l])^(n2-Min[n1,n2])/;n2>0&&n1>0
,(UbarSpa[i].USpa[j])^n1_. (UbarSpa[k].USpa[l_])^n2_.:>(UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpa[i].USpa[j])^n1_. (UbarSpa[k].USpa[l_])^n2_.:>(-1)^n1 (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(-UbarSpa[i].USpa[j])^n1_. (-UbarSpa[k].USpa[l_])^n2_.:>(-1)^(n1+n2) (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0,(UbarSpa[i].USpa[j])^n1_. (-UbarSpa[k].USpa[l_])^n2_.:>(-1)^n2 (UbarSpa[i].USpa[k] UbarSpa[j].USpa[l]+UbarSpa[i].USpa[l] UbarSpa[k].USpa[j])^Min[n1,n2] (UbarSpa[i].USpa[j])^(n1-Min[n1,n2]) (UbarSpa[k].USpa[l])^(n2-Min[n1,n2])/;n2>0&&n1>0}


Schouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ]:=x//.Schouten3Arule[i,j,k]//.Schouten3Brule[i,j,k]
ASchouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ]:=x//.Schouten3Arule[i,j,k]
BSchouten[x_,i_?SpinorQ,j_?SpinorQ,k_?SpinorQ]:=x//.Schouten3Brule[i,j,k]


Off[RuleDelayed::rhs]


SpA[a_?SpinorQ]:=Spaa[a,__]|Spaa[__,a]|Spab[a,__]|Spba[__,a]


SpA[a_,r_]:=Spaa[a,Pattern[r,BlankSequence[]]]|Spaa[Pattern[r,BlankSequence[]],a]|Spab[a,Pattern[r,BlankSequence[]]]|Spba[Pattern[r,BlankSequence[]],a]


SpA[a_,r_,sp_]:=(sp:(Spaa|Spab))[a,Pattern[r,BlankSequence[]]]|(sp:(Spaa|Spba))[Pattern[r,BlankSequence[]],a]


SpADeclared[a_,r_,sp_]:=(sp:(Spaa|Spab))[a,Pattern[r,PatternTest[BlankNullSequence[],Function[Or[SMatrixQ[Slot[1]],SpinorQ[Slot[1]]]]]]]|(sp:(Spaa|Spba))[Pattern[r,PatternTest[BlankNullSequence[],Function[Or[SMatrixQ[Slot[1]],SpinorQ[Slot[1]]]]]],a]


SpB[a_?SpinorQ]:=Spbb[a,__]|Spbb[__,a]|Spba[a,__]|Spab[__,a]


SpB[a_,r_,sp_]:=(sp:(Spbb|Spba))[a,Pattern[r,BlankSequence[]]]|(sp:(Spbb|Spab))[Pattern[r,BlankSequence[]],a]


SpBDeclared[a_,r_,sp_]:=(sp:(Spbb|Spba))[a,Pattern[r,PatternTest[BlankNullSequence[],Function[Or[SMatrixQ[Slot[1]],SpinorQ[Slot[1]]]]]]]|(sp:(Spbb|Spab))[Pattern[r,PatternTest[BlankNullSequence[],Function[Or[SMatrixQ[Slot[1]],SpinorQ[Slot[1]]]]]],a]


LaADeclared[l_,r_,la_]:=Dot[CLa[l],Pattern[r,PatternTest[BlankNullSequence[],Sm2Q]],la:(La|CLat)[_]]|Dot[la:(CLa|Lat)[_],Pattern[r,PatternTest[BlankNullSequence[],Sm2Q]],La[l]]


LaBDeclared[l_,r_,la_]:=Dot[Lat[l],Pattern[r,PatternTest[BlankNullSequence[],Sm2Q]],la:(La|CLat)[_]]|Dot[la:(CLa|Lat)[_],Pattern[r,PatternTest[BlankNullSequence[],Sm2Q]],CLat[l]]


UADeclared[l_,r_,la_]:=Dot[UbarSpa[l],Pattern[r,BlankNullSequence[Sm4]],la:(USpa|USpb)[_]]|Dot[la:(UbarSpa|UbarSpb)[_],Pattern[r,BlankNullSequence[Sm4]],USpa[l]]


UBDeclared[l_,r_,la_]:=Dot[UbarSpb[l],Pattern[r,BlankNullSequence[Sm4]],la:(USpa|USpb)[_]]|Dot[la:(UbarSpa|UbarSpb)[_],Pattern[r,BlankNullSequence[Sm4]],USpb[l]]


On[RuleDelayed::rhs]


RevSign[a_?SpinorQ][a_?SpinorQ,sm___,_?SpinorQ]:=1


RevSign[sp_?SpinorQ][a_?SpinorQ,sm___,_?SpinorQ]:=-(-1)^NbrDM[sm]


TrueOrderOfRest[a_][a_,r__]:=r
TrueOrderOfRest[a_][r__,a_]:=Sequence@@Reverse[{r}]
ReverseOrderOfRest[a_][r__,a_]:=r
ReverseOrderOfRest[a_][a_,r__]:=Sequence@@Reverse[{r}]


arule[l_]:=(Sp:(SpADeclared[l,r,sp]))^n0_.((Sp1:(SpADeclared[l,r1,sp1]))^n1_. (Sp2:(SpADeclared[l,r2,sp2]))^n2_.) rest:((SpA[l]^_.)...):>((rest FixSecond[sp][ReverseOrderOfRest[l]@@Sp2,TrueOrderOfRest[l]@@Sp]/FixSecond[sp1][ReverseOrderOfRest[l]@@Sp2,TrueOrderOfRest[l]@@Sp1] (Sp)^(n0-1) ((Sp1)^(n1+1) (Sp2)^(n2+1)/sp2[l,TrueOrderOfRest[l]@@Sp2])+rest FixSecond[sp][ReverseOrderOfRest[l]@@Sp1,TrueOrderOfRest[l]@@Sp]/FixSecond[sp2][ReverseOrderOfRest[l]@@Sp1,TrueOrderOfRest[l]@@Sp2] (Sp)^(n0-1)((Sp1)^(n1+1) (Sp2)^(n2+1)/sp1[l,TrueOrderOfRest[l]@@Sp1])) (RevSign[l]@@Sp) (RevSign[l]@@Sp1) (RevSign[l]@@Sp2))/;n0>0&&n1<0&&n2<0


RevSignB[a_?SpinorQ][_?SpinorQ,sm___,a_?SpinorQ]:=1


RevSignB[sp_?SpinorQ][_?SpinorQ,sm___,_?SpinorQ]:=-(-1)^NbrDM[sm]


brule[l_]:=(Sp:(SpBDeclared[l,r,sp]))^(n0_.)(Sp1:(SpBDeclared[l,r1,sp1]))^(n1_) (Sp2:(SpBDeclared[l,r2,sp2]))^n2_ rest:((SpB[l]^_.)...):>(FixFirst[sp][ReverseOrderOfRest[l]@@Sp,TrueOrderOfRest[l]@@Sp2]/FixFirst[sp1][ReverseOrderOfRest[l]@@Sp1,TrueOrderOfRest[l]@@Sp2] (rest Sp^(n0-1)Sp1^(n1+1) Sp2^(n2+1))/sp2[ReverseOrderOfRest[l]@@Sp2,l]+FixFirst[sp][ReverseOrderOfRest[l]@@Sp,TrueOrderOfRest[l]@@Sp1]/FixFirst[sp2][ReverseOrderOfRest[l]@@Sp2,TrueOrderOfRest[l]@@Sp1] (rest  Sp^(n0-1)Sp1^(n1+1) Sp2^(n2+1))/sp1[ReverseOrderOfRest[l]@@Sp1,l]) (RevSignB[l]@@Sp) (RevSignB[l]@@Sp1) (RevSignB[l]@@Sp2)/;n0>0&&n1<0&&n2<0


Schouten[x_,l_?SpinorQ]:=x//.brule[l]//.arule[l]//.arule2dim[l]//.brule2dim[l]//.arule4dim[l]//.brule4dim[l]
ASchouten[x_,l_?SpinorQ]:=x//.arule[l]//.arule2dim[l]//.arule4dim[l]
BSchouten[x_,l_?SpinorQ]:=x//.brule[l]//.brule2dim[l]//.brule4dim[l]


newrule1=(fnb:(Spaa|Spab))[l,mb___?SMatrixQ,rb_?SpinorQ]/((fnd:(Spaa|Spab))[l,md___?SMatrixQ,rd_?SpinorQ] (fnf:(Spaa|Spab))[l,mf___?SMatrixQ,rf_?SpinorQ]):>FixSecond[fnb][rf,Sequence@@Reverse[{mf}],mb,rb]/FixSecond[fnd][rf,Sequence@@Reverse[{mf}],md,rd] 1/fnf[l,mf,rf]+FixSecond[fnb][rd,Sequence@@Reverse[{md}],mb,rb]/FixSecond[fnf][rd,Sequence@@Reverse[{md}],mf,rf] 1/fnd[l,md,rd];


newrule2={(fnb:(Spaa|Spab))[l,mb___?SMatrixQ,rb_?SpinorQ]/((fnd:(Spaa|Spab))[l,md___?SMatrixQ,rd_?SpinorQ] (fnf:(Spaa|Spab))[l,mf___?SMatrixQ,rf_?SpinorQ]):>FixSecond[fnb][rf,Sequence@@Reverse[{mf}],mb,rb]/FixSecond[fnd][rf,Sequence@@Reverse[{mf}],md,rd] 1/fnf[l,mf,rf]+FixSecond[fnb][rd,Sequence@@Reverse[{md}],mb,rb]/FixSecond[fnf][rd,Sequence@@Reverse[{md}],mf,rf] 1/fnd[l,md,rd],(fnb:(Spaa|Spab))[l,mb___?SMatrixQ,rb_?SpinorQ]/((fnd:(Spaa|Spab))[l,md___?SMatrixQ,rd_?SpinorQ] (fnf:(Spaa|Spab))[l,mf___?SMatrixQ,rf_?SpinorQ]):>FixSecond[fnb][rf,Sequence@@Reverse[{mf}],mb,rb]/FixSecond[fnd][rf,Sequence@@Reverse[{mf}],md,rd] 1/fnf[l,mf,rf]+FixSecond[fnb][rd,Sequence@@Reverse[{md}],mb,rb]/FixSecond[fnf][rd,Sequence@@Reverse[{md}],mf,rf] 1/fnd[l,md,rd]}


Sm2Q[x_]:=MatchQ[x,Sm2[_?SMatrixQ]|CSm2[_?SMatrixQ]]


ChangeC[x_]:=x/.{Sm2->CSm2,CSm2->Sm2,La->CLa,CLa->La,Lat->CLat,CLat->Lat}


ChangeU[x_]:=x/.{UbarSpa->USpa,USpa->UbarSpa,UbarSpb->USpb,USpb->UbarSpb}


COMBINE[{la1:(Lat|CLa)[_],sm1___?Sm2Q},{la2:(La|CLat)[_],sm2___?Sm2Q}]:=Dot[la1,sm1,sm2,la2]
COMBINE[{la1:(Lat|CLa)[_],sm1___?Sm2Q},{la2:(CLa|Lat)[_],sm2___?Sm2Q}]:=(-1)^Length[{sm2}] Dot[la1,sm1,Sequence@@Reverse[ChangeC/@{sm2}],ChangeC[la2]]
COMBINE[{la1:(La|CLat)[_],sm1___?Sm2Q},{la2:(CLa|Lat)[_],sm2___?Sm2Q}]:=(-1)^Length[{sm2,sm1}] Dot[ChangeC[la1],Sequence@@Reverse[ChangeC/@{sm1}],Sequence@@Reverse[ChangeC/@{sm2}],ChangeC[la2]]
COMBINE[{la1:(La|CLat)[_],sm1___?Sm2Q},{la2:(La|CLat)[_],sm2___?Sm2Q}]:=(-1)^Length[{sm1}]  Dot[ChangeC[la1],Sequence@@Reverse[ChangeC/@{sm1}],sm2,la2]


COMBINE[{ub:(UbarSpa|UbarSpb)[_],sm1___Sm4},{u:(USpa|USpb)[_],sm2___Sm4}]:=Dot[ub,sm1,sm2,u]
COMBINE[{ub1:(UbarSpa|UbarSpb)[_],sm1___Sm4},{ub2:(UbarSpa|UbarSpb)[_],sm2___Sm4}]:=(-1)^Length[{sm2}] Dot[ub1,sm1,Sequence@@Reverse[{sm2}],ChangeU[ub2]]
COMBINE[{u:(USpa|USpb)[_],sm1___Sm4},{ub:(UbarSpa|UbarSpb)[_],sm2___Sm4}]:=(-1)^Length[{sm2,sm1}] Dot[ChangeU[u],Sequence@@Reverse[{sm1}],Sequence@@Reverse[{sm2}],ChangeU[ub]]
COMBINE[{u1:(USpa|USpb)[_],sm1___Sm4},{u2:(USpa|USpb)[_],sm2___Sm4}]:=(-1)^Length[{sm1}]  Dot[ChangeU[u1],Sequence@@Reverse[{sm1}],sm2,u2]


LA[a_?SpinorQ]:=Dot[CLa[a],__]|Dot[__,La[a]]
LB[a_?SpinorQ]:=Dot[Lat[a],__]|Dot[__,CLat[a]]


arule2dim[l_]:=(Sp:(LaADeclared[l,r,la]))^n0_.((Sp1:(LaADeclared[l,r1,la1]))^n1_. (Sp2:(LaADeclared[l,r2,la2]))^n2_.)rest:((LA[l]^_.)...) :>(-1)^Count[{la,la1,la2},_Lat|_CLa](rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1) COMBINE[{la1,r1},{la,r}]/COMBINE[{la1,r1},{la2,r2}]/COMBINE[{La[l]},{la1,r1}]-rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1)COMBINE[{la2,r2},{la,r}]/COMBINE[{la1,r1},{la2,r2}]/COMBINE[{La[l]},{la2,r2}])/;n0>0&&n1<0&&n2<0


brule2dim[l_]:=(Sp:(LaBDeclared[l,r,la]))^n0_.((Sp1:(LaBDeclared[l,r1,la1]))^n1_. (Sp2:(LaBDeclared[l,r2,la2]))^n2_.)rest:((LB[l]^_.)...) :>(-1)^Count[{la,la1,la2},_Lat|_CLa](rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1) COMBINE[{la1,r1},{la,r}]/COMBINE[{la1,r1},{la2,r2}]/COMBINE[{Lat[l]},{la1,r1}]-rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1) COMBINE[{la2,r2},{la,r}]/COMBINE[{la1,r1},{la2,r2}]/COMBINE[{Lat[l]},{la2,r2}])/;n0>0&&n1<0&&n2<0


arule4dim[l_]:=(Sp:(UADeclared[l,r,u]))^n0_.((Sp1:(UADeclared[l,r1,u1]))^n1_. (Sp2:(UADeclared[l,r2,u2]))^n2_.)rest:((LA[l]^_.)...) :>(-1)^Count[{u,u1,u2},_UbarSpa|_UbarSpb](rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1) COMBINE[{u1,r1},{u,r}]/COMBINE[{u1,r1},{u2,r2}]/COMBINE[{UbarSpa[l]},{u1,r1}]-rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1)COMBINE[{u2,r2},{u,r}]/COMBINE[{u1,r1},{u2,r2}]/COMBINE[{UbarSpa[l]},{u2,r2}])/;n0>0&&n1<0&&n2<0


brule4dim[l_]:=(Sp:(UBDeclared[l,r,u]))^n0_.((Sp1:(UBDeclared[l,r1,u1]))^n1_. (Sp2:(UBDeclared[l,r2,u2]))^n2_.)rest:((LB[l]^_.)...) :>(-1)^Count[{u,u1,u2},_UbarSpa|_UbarSpb](rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1) COMBINE[{u1,r1},{u,r}]/COMBINE[{u1,r1},{u2,r2}]/COMBINE[{UbarSpb[l]},{u1,r1}]-rest Sp^(n0-1) Sp1^(n1+1)Sp2^(n2+1)COMBINE[{u2,r2},{u,r}]/COMBINE[{u1,r1},{u2,r2}]/COMBINE[{UbarSpb[l]},{u2,r2}])/;n0>0&&n1<0&&n2<0


Spaa[a_?SpinorQ,a_?SpinorQ]:=0
Spbb[b_?SpinorQ,b_?SpinorQ]:=0
Spaa[___,a_?SpinorQ,a_?SpinorQ,___]:=0
Spab[___,a_?SpinorQ,a_?SpinorQ,___]:=0
Spba[___,a_?SpinorQ,a_?SpinorQ,___]:=0
Spbb[___,a_?SpinorQ,a_?SpinorQ,___]:=0

Unprotect[Dot]
Dot[___,0,___]:=0

Dot[CLa[a_?SpinorQ],La[a_?SpinorQ]]:=0;
Dot[Lat[a_?SpinorQ],CLat[a_?SpinorQ]]:=0;

Dot[Sm2[a_?SpinorQ],CSm2[a_?SpinorQ]]:=0;
Dot[CSm2[a_?SpinorQ],Sm2[a_?SpinorQ]]:=0;

Dot[Sm2[a_?SpinorQ],La[a_?SpinorQ]]:=0;
Dot[Lat[a_?SpinorQ],Sm2[a_?SpinorQ]]:=0;
Dot[CSm2[a_?SpinorQ],CLat[a_?SpinorQ]]:=0;
Dot[CLa[a_?SpinorQ],CSm2[a_?SpinorQ]]:=0;

Dot[UbarSpa[a_?SpinorQ],USpa[a_?SpinorQ]]:=0;
Dot[UbarSpb[a_?SpinorQ],USpb[a_?SpinorQ]]:=0;

Dot[Sm4[a_?SpinorQ],Sm4[a_?SpinorQ]]:=0;

Dot[Sm4[a_?SpinorQ],USpa[a_?SpinorQ]]:=0;
Dot[UbarSpa[a_?SpinorQ],Sm4[a_?SpinorQ]]:=0;
Dot[Sm4[a_?SpinorQ],USpb[a_?SpinorQ]]:=0;
Dot[UbarSpb[a_?SpinorQ],Sm4[a_?SpinorQ]]:=0;

Protect[Dot]

(*
Spaa[Sp[i_],Sm[i_],___]:=0
Spab[Sp[i_],Sm[i_],___]:=0
Spba[Sp[i_],Sm[i_],___]:=0
Spbb[Sp[i_],Sm[i_],___]:=0
Spaa[___,Sm[i_],Sm[i_],___]:=0
Spab[___,Sm[i_],Sm[i_],___]:=0
Spba[___,Sm[i_],Sm[i_],___]:=0
Spbb[___,Sm[i_],Sm[i_],___]:=0
Spaa[___,Sm[i_],Sp[i_]]:=0
Spab[___,Sm[i_],Sp[i_]]:=0
Spba[___,Sm[i_],Sp[i_]]:=0
Spbb[___,Sm[i_],Sp[i_]]:=0*)


Spaa[a_?SpinorQ,p___?SMatrixQ,a_?SpinorQ]:=-Spaa[a,Sequence@@Reverse[{p}],a]/;Not[OrderedQ[{{p},Reverse[{p}]}]]


Spaa[a_?SpinorQ,p___?SMatrixQ,b_?SpinorQ]:=-Spaa[b,Sequence@@Reverse[{p}],a]/;Not[OrderedQ[{a,b}]]


Spbb[a_?SpinorQ,p___?SMatrixQ,a_?SpinorQ]:=-Spbb[a,Sequence@@Reverse[{p}],a]/;Not[OrderedQ[{Reverse[{p}],{p}}]]


Spbb[a_?SpinorQ,p___?SMatrixQ,b_?SpinorQ]:=-Spbb[b,Sequence@@Reverse[{p}],a]/;OrderedQ[{a,b}]&&UnsameQ[a,b]


Spba[a_?SpinorQ,p___?SMatrixQ,b_?SpinorQ]:=Spab[b,Sequence@@Reverse[{p}],a]


CRev[x_]:=x/.{Sm2->CSm2,CSm2->Sm2,La->CLa,CLa->La,CLat->CLa,CLa->CLat}

Unprotect[Dot];

Dot[CLa[a_?SpinorQ], sms__,clat : La[a_?SpinorQ]] := -Dot[CLa[a], Sequence @@ Reverse[CRev[{sms}]], La[a]] /;RightCSM2Order[{sms}] && EvenQ[Length[{sms}]] &&   Not[OrderedQ[{First /@ {sms}, Reverse[First /@ {sms}]}]]

Dot[CLa[a_?SpinorQ],sms__,clat:La[b_?SpinorQ]]:=-Dot[CLa[b],Sequence@@Reverse[CRev[{sms}]],La[a]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&OrderedQ[{b,a}]&&UnsameQ[a,b]

Dot[CLa[a_?SpinorQ],la:La[b_?SpinorQ]]:=-Dot[CLa[b],La[a]]/;OrderedQ[{b,a}]&&UnsameQ[a,b]

Dot[Lat[a_?SpinorQ],sms__,clat:CLat[a_?SpinorQ]]:=-Dot[Lat[a],Sequence@@Reverse[CRev[{sms}]],CLat[a]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&Not[OrderedQ[{Reverse[First/@{sms}],First/@{sms}}]]

Dot[Lat[a_?SpinorQ],sms__,clat:CLat[b_?SpinorQ]]:=-Dot[Lat[b],Sequence@@Reverse[CRev[{sms}]],CLat[a]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&OrderedQ[{a,b}]&&UnsameQ[a,b]

Dot[Lat[a_?SpinorQ],clat:CLat[b_?SpinorQ]]:=-Dot[Lat[b],CLat[a]]/;OrderedQ[{a,b}]&&UnsameQ[a,b]

Dot[CLa[a_?SpinorQ],sms__,clat:CLat[b_?SpinorQ]]:=Dot[Lat[b],Sequence@@Reverse[CRev[{sms}]],La[a]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]]

(* normal ordering for four-dimensional representation *)

Dot[UbarSpa[a_?SpinorQ], sms__Sm4, USpa[a_?SpinorQ]] := -Dot[UbarSpa[a], Sequence @@ Reverse[{sms}], USpa[a]] /; EvenQ[Length[{sms}]] &&   Not[OrderedQ[{First /@ {sms}, Reverse[First /@ {sms}]}]]

Dot[UbarSpa[a_?SpinorQ], sms__Sm4, USpa[b_?SpinorQ]] := -Dot[UbarSpa[b], Sequence @@ Reverse[{sms}], USpa[a]] /; EvenQ[Length[{sms}]]&&OrderedQ[{b,a}]&&UnsameQ[a,b]

Dot[UbarSpa[a_?SpinorQ],USpa[b_?SpinorQ]] := -Dot[UbarSpa[b],USpa[a]] /; OrderedQ[{b,a}]&&UnsameQ[a,b]

Dot[UbarSpb[a_?SpinorQ], sms__Sm4, USpb[a_?SpinorQ]] := -Dot[UbarSpb[a], Sequence @@ Reverse[{sms}], USpb[a]] /; EvenQ[Length[{sms}]] &&   Not[OrderedQ[{ Reverse[First /@ {sms}],First /@ {sms}}]]

Dot[UbarSpb[a_?SpinorQ], sms__Sm4, USpb[b_?SpinorQ]] := -Dot[UbarSpb[b], Sequence @@ Reverse[{sms}], USpb[a]] /; EvenQ[Length[{sms}]]&&OrderedQ[{a,b}]&&UnsameQ[a,b] 

Dot[UbarSpb[a_?SpinorQ],USpb[b_?SpinorQ]] := -Dot[UbarSpb[b], USpb[a]] /; OrderedQ[{a,b}]&&UnsameQ[a,b] 

Dot[UbarSpb[b_?SpinorQ], sms__Sm4, USpa[a_?SpinorQ]] := Dot[UbarSpa[a], Sequence @@ Reverse[{sms}], USpb[b]] /;  OddQ[Length[{sms}]] 



Protect[Dot]


Unprotect[Reverse]
Reverse[x_?SMatrixQ]:=x
Protect[Reverse]


Compactify::nonspinor="Second argument `1` of Compactify[...] should be a spinor."


Compactify2DimRule={
Dot[CLa[b_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[a_?SpinorQ]]:>CLa[b].La[(Dot@@First/@{sms})[a]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]],

Dot[CLa[b_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[a_?SpinorQ]]:>CLa[b].La[(Dot@@First/@{sms})[a]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]],


Dot[Lat[b_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[a_?SpinorQ]]:>Lat[b].CLat[(Dot@@First/@{sms})[a]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]],

Dot[Lat[b_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[a_?SpinorQ]]:>Lat[b].CLat[(Dot@@First/@{sms})[a]]/;RightSM2Order[{sms}]&&OddQ[Length[{sms}]]

}


Compactify4DimRule={
Dot[ub:UbarSpa[b_?SpinorQ],sms__Sm4,u:USpa[a_?SpinorQ]]:>UbarSpa[b].USpa[(Dot@@First/@{sms})[a]]/;EvenQ[Length[{sms}]],
Dot[ub:UbarSpb[b_?SpinorQ],sms__Sm4,u:USpb[a_?SpinorQ]]:>UbarSpb[b].USpb[(Dot@@First/@{sms})[a]]/;EvenQ[Length[{sms}]],
Dot[ub:UbarSpa[b_?SpinorQ],sms__Sm4,u:USpb[a_?SpinorQ]]:>UbarSpa[b].USpa[(Dot@@First/@{sms})[a]]/;OddQ[Length[{sms}]],
Dot[ub:UbarSpb[b_?SpinorQ],sms__Sm4,u:USpa[a_?SpinorQ]]:>UbarSpb[b].USpb[(Dot@@First/@{sms})[a]]/;OddQ[Length[{sms}]]
}


ACompactify2DimRule[l_]:={
Dot[CLa[l],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[a_?SpinorQ]]:>CLa[l].La[(Dot@@First/@{sms})[a]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[CLa[l],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[a_?SpinorQ]]:>CLa[l].La[(Dot@@First/@{sms})[a]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[CLa[b_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[l]]:>-CLa[l].La[(Dot@@First/@Reverse[{sms}])[b]]/;RightCSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&UnsameQ[b,l],

Dot[Lat[a_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[l]]:>CLa[l].La[(Dot@@First/@Reverse[{sms}])[a]]/;RightSM2Order[{sms}]&&OddQ[Length[{sms}]]&&UnsameQ[a,l]

}


BCompactify2DimRule[l_]:={

Dot[Lat[l],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[a_?SpinorQ]]:>Lat[l].CLat[(Dot@@First/@{sms})[a]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[Lat[l],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:La[a_?SpinorQ]]:>Lat[l].CLat[(Dot@@First/@{sms})[a]]/;RightSM2Order[{sms}]&&OddQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[CLa[a_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[l]]:>Lat[l].CLat[(Dot@@First/@Reverse[{sms}])[a]]/;RightCSM2Order[{sms}]&&OddQ[Length[{sms}]]&&UnsameQ[a,l]
,Dot[Lat[a_?SpinorQ],sms__?(MatchQ[#,_Sm2|_CSm2]&),la:CLat[l]]:>-Lat[l].CLat[(Dot@@First/@Reverse[{sms}])[a]]/;RightSM2Order[{sms}]&&EvenQ[Length[{sms}]]&&UnsameQ[a,l]

}


ACompactify4DimRule[l_]:={
Dot[UbarSpa[l],sms__Sm4,u:USpa[a_?SpinorQ]]:>UbarSpa[l].USpa[(Dot@@First/@{sms})[a]]/;EvenQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[UbarSpa[l],sms__Sm4,USpb[a_?SpinorQ]]:>UbarSpa[l].USpa[(Dot@@First/@{sms})[a]]/;OddQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[UbarSpa[b_?SpinorQ],sms__Sm4,USpa[l]]:>-UbarSpa[l].USpa[(Dot@@First/@Reverse[{sms}])[b]]/;EvenQ[Length[{sms}]]&&UnsameQ[b,l],

Dot[UbarSpb[a_?SpinorQ],sms__Sm4,USpa[l]]:>UbarSpa[l].USpa[(Dot@@First/@Reverse[{sms}])[a]]/;OddQ[Length[{sms}]]&&UnsameQ[a,l]
}


BCompactify4DimRule[l_]:={
Dot[UbarSpb[l],sms__Sm4,u:USpb[a_?SpinorQ]]:>UbarSpb[l].USpb[(Dot@@First/@{sms})[a]]/;EvenQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[UbarSpb[l],sms__Sm4,USpa[a_?SpinorQ]]:>UbarSpb[l].USpb[(Dot@@First/@{sms})[a]]/;OddQ[Length[{sms}]]&&UnsameQ[a,l],

Dot[UbarSpb[b_?SpinorQ],sms__Sm4,USpb[l]]:>-UbarSpb[l].USpb[(Dot@@First/@Reverse[{sms}])[b]]/;EvenQ[Length[{sms}]]&&UnsameQ[b,l],

Dot[UbarSpa[a_?SpinorQ],sms__Sm4,USpb[l]]:>UbarSpb[l].USpb[(Dot@@First/@Reverse[{sms}])[a]]/;OddQ[Length[{sms}]]&&UnsameQ[a,l]
}


Compactify[x_,n_Integer]:=Compactify[x,Sp[n]]
ACompactify[x_,n_Integer]:=ACompactify[x,Sp[n]]
BCompactify[x_,n_Integer]:=BCompactify[x,Sp[n]]


Compactify[x_,ns_?(Not[SpinorQ[#]]&)]:=(Message[Compactify::nonspinor,ns];Return[$Failed])


Compactify[x_,l_?SpinorQ]:=x//.{(Spaa|Spab)[l,p__?SMatrixQ,m_?(UnsameQ[#,l]&)]:>Spaa[l,Dot[p][m]],(Spaa|Spba)[m_?(UnsameQ[#,l]&),p__?SMatrixQ,l]:>(-1)^NbrDM[Dot[p]] Spaa[Reverse[Dot[p]][m],l],(Spbb|Spba)[l,p__?SMatrixQ,m_?(UnsameQ[#,l]&)]:>Spbb[l,Dot[p][m]],(Spbb|Spab)[m_?(UnsameQ[#,l]&),p__?SMatrixQ,l]:>(-1)^NbrDM[Dot[p]] Spbb[Reverse[Dot[p]][m],l]}//.ACompactify2DimRule[l]//.BCompactify2DimRule[l]//.ACompactify4DimRule[l]//.BCompactify4DimRule[l]


ACompactify[x_,l_?SpinorQ]:=x//.{(Spaa|Spab)[l,p__?SMatrixQ,m_?(UnsameQ[#,l]&)]:>Spaa[l,Dot[p][m]],(Spaa|Spba)[m_?(UnsameQ[#,l]&),p__?SMatrixQ,l]:>(-1)^NbrDM[Dot[p]] Spaa[Reverse[Dot[p]][m],l]}//.ACompactify2DimRule[l]//.ACompactify4DimRule[l]


BCompactify[x_,l_?SpinorQ]:=x//.{(Spbb|Spba)[l,p__?SMatrixQ,m_?(UnsameQ[#,l]&)]:>Spbb[l,Dot[p][m]],(Spbb|Spab)[m_?(UnsameQ[#,l]&),p__?SMatrixQ,l]:>(-1)^NbrDM[Dot[p]] Spbb[Reverse[Dot[p]][m],l]}//.BCompactify2DimRule[l]//.BCompactify4DimRule[l]


Compactify[x_]:=x//.{(Spaa|Spab)[l_?SpinorQ,p__?SMatrixQ,m_?SpinorQ]:>Spaa[l,Dot[p][m]],(Spbb|Spba)[l_?SpinorQ,p__?SMatrixQ,m_?SpinorQ]:>Spbb[l,Dot[p][m]]}//.Compactify2DimRule//.Compactify4DimRule


NbrDM[]:=0
NbrDM[_?SpinorQ,rest___]:=1+NbrDM[rest]
NbrDM[Dot[m_?SMatrixQ ,ms__?SMatrixQ],rest___]:=Length[{m,ms}]+NbrDM[rest]
NbrDM[_?SMatrixQ,rest___]:=1+NbrDM[rest]


ToSequence[d_Dot]:=Sequence@@d
ToSequence[sm_?SMatrixQ]:=sm


UnCompact::nonspinor="Second argument `1` of UnCompact[...] should be a spinor."


UnCompact[x_,i_Integer]:=UnCompact[x,Sp[i]]


UnCompact[x_,ns_?(Not[SpinorQ[#]]&)]:=(Message[UnCompact::nonspinor,ns];Return[$Failed])


Ext[Sp_,_?EvenQ,_?EvenQ]=Sp

Ext[Spaa,_?EvenQ,_?OddQ]=Spab
Ext[Spaa,_?OddQ,_?EvenQ]=-Spba[##]&
Ext[Spaa,_?OddQ,_?OddQ]=-Spbb[##]&

Ext[Spab,_?EvenQ,_?OddQ]=Spaa
Ext[Spab,_?OddQ,_?EvenQ]=-Spbb[##]&
Ext[Spab,_?OddQ,_?OddQ]=-Spba[##]&

Ext[Spbb,_?EvenQ,_?OddQ]=Spba
Ext[Spbb,_?OddQ,_?EvenQ]=-Spab[##]&
Ext[Spbb,_?OddQ,_?OddQ]=-Spaa[##]&

Ext[Spba,_?EvenQ,_?OddQ]=Spbb
Ext[Spba,_?OddQ,_?EvenQ]=-Spaa[##]&
Ext[Spba,_?OddQ,_?OddQ]=-Spab[##]&


UnCompactifyLaRuleA={Dot[bb___,cla:(_CLa|_Sm2),La[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa___]:>Switch[Length[sm],
0,Dot[bb,cla,CSm2[sm],CLat[a],aa],
_?EvenQ,Dot[bb,cla,Sequence@@alternate[Sm2,CSm2][sm],La[a],aa],
_?OddQ,Dot[bb,cla,Sequence@@alternate[Sm2,CSm2][sm],CLat[a],aa]],

Dot[bb___,La[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],cla:(_CLa|_Sm2),aa___]:>Switch[Length[sm],
0,Dot[bb,CLat[a],CSm2[sm],cla,aa],
_?EvenQ,Dot[bb,La[a],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],cla,aa],
_?OddQ,Dot[bb,CLat[a],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],cla,aa]],

Dot[bb___,la:(_La|_CSm2),CLa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa___]:>Switch[Length[sm],
0,-Dot[bb,la,Sm2[sm],Lat[a],aa],
_?EvenQ,Dot[bb,la,Sequence@@alternate[CSm2,Sm2][sm],CLa[a],aa],
_?OddQ,-Dot[bb,la,Sequence@@alternate[CSm2,Sm2][sm],Lat[a],aa]],

Dot[bb___,CLa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],la:(_La|_CSm2),aa___]:>Switch[Length[sm],
0,-Dot[bb,Lat[a],Sm2[sm],la,aa],
_?EvenQ,Dot[bb,CLa[a],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],la,aa],
_?OddQ,-Dot[bb,Lat[a],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],la,aa]]
}


UnCompactifyLaRuleB={
Dot[bb___,lat:(_Lat|_CSm2),CLat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa___]:>Switch[Length[sm],
0,Dot[bb,lat,Sm2[sm],La[a],aa],
_?EvenQ,Dot[bb,lat,Sequence@@alternate[CSm2,Sm2][sm],CLat[a],aa],
_?OddQ,Dot[bb,lat,Sequence@@alternate[CSm2,Sm2][sm],La[a],aa]],

Dot[bb___,CLat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],lat:(_CLa|_Sm2),aa___]:>Switch[Length[sm],
0,Dot[bb,La[a],Sm2[sm],lat,aa],
_?EvenQ,Dot[bb,CLat[a],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],lat,aa],
_?OddQ,Dot[bb,La[a],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],lat,aa]],

Dot[bb___,clat:(_CLat|_Sm2),Lat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa___]:>Switch[Length[sm],
0,-Dot[bb,clat,CSm2[sm],CLa[a],aa],
_?EvenQ,Dot[bb,clat,Sequence@@alternate[Sm2,CSm2][sm],Lat[a],aa],
_?OddQ,-Dot[bb,clat,Sequence@@alternate[Sm2,CSm2][sm],CLa[a],aa]],

Dot[bb___,Lat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],clat:(_CLat|_Sm2),aa___]:>Switch[Length[sm],
0,-Dot[bb,CLa[a],CSm2[sm],clat,aa],
_?EvenQ,Dot[bb,Lat[a],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],clat,aa],
_?OddQ,-Dot[bb,CLa[a],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],clat,aa]]
}


UnCompactifyLaRuleAs[ss_]:={Dot[bb___,cla:(_CLa|_Sm2),La[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],aa___]:>Switch[Length[sm],
0,Dot[bb,cla,CSm2[sm],CLat[ss],aa],
_?EvenQ,Dot[bb,cla,Sequence@@alternate[Sm2,CSm2][sm],La[ss],aa],
_?OddQ,Dot[bb,cla,Sequence@@alternate[Sm2,CSm2][sm],CLat[ss],aa]],

Dot[bb___,La[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],cla:(_CLa|_Sm2),aa___]:>Switch[Length[sm],
0,Dot[bb,CLat[ss],CSm2[sm],cla,aa],
_?EvenQ,Dot[bb,La[ss],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],cla,aa],
_?OddQ,Dot[bb,CLat[ss],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],cla,aa]],

Dot[bb___,la:(_La|_CSm2),CLa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],aa___]:>Switch[Length[sm],
0,-Dot[bb,la,Sm2[sm],Lat[ss],aa],
_?EvenQ,Dot[bb,la,Sequence@@alternate[CSm2,Sm2][sm],CLa[ss],aa],
_?OddQ,-Dot[bb,la,Sequence@@alternate[CSm2,Sm2][sm],Lat[ss],aa]],

Dot[bb___,CLa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],la:(_La|_CSm2),aa___]:>Switch[Length[sm],
0,-Dot[bb,Lat[ss],Sm2[sm],la,aa],
_?EvenQ,Dot[bb,CLa[ss],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],la,aa],
_?OddQ,-Dot[bb,Lat[ss],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],la,aa]]
}


UnCompactifyLaRuleBs[ss_]:={
Dot[bb___,lat:(_Lat|_CSm2),CLat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],aa___]:>Switch[Length[sm],
0,Dot[bb,lat,Sm2[sm],La[ss],aa],
_?EvenQ,Dot[bb,lat,Sequence@@alternate[CSm2,Sm2][sm],CLat[ss],aa],
_?OddQ,Dot[bb,lat,Sequence@@alternate[CSm2,Sm2][sm],La[ss],aa]],

Dot[bb___,CLat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],lat:(_CLa|_Sm2),aa___]:>Switch[Length[sm],
0,Dot[bb,La[ss],Sm2[sm],lat,aa],
_?EvenQ,Dot[bb,CLat[ss],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],lat,aa],
_?OddQ,Dot[bb,La[ss],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],lat,aa]],

Dot[bb___,clat:(_CLat|_Sm2),Lat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],aa___]:>Switch[Length[sm],
0,-Dot[bb,clat,CSm2[sm],CLa[ss],aa],
_?EvenQ,Dot[bb,clat,Sequence@@alternate[Sm2,CSm2][sm],Lat[ss],aa],
_?OddQ,-Dot[bb,clat,Sequence@@alternate[Sm2,CSm2][sm],CLa[ss],aa]],

Dot[bb___,Lat[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[ss]],clat:(_CLat|_Sm2),aa___]:>Switch[Length[sm],
0,-Dot[bb,CLa[ss],CSm2[sm],clat,aa],
_?EvenQ,Dot[bb,Lat[ss],Sequence@@alternate[CSm2,Sm2][Reverse[sm]],clat,aa],
_?OddQ,-Dot[bb,CLa[ss],Sequence@@alternate[Sm2,CSm2][Reverse[sm]],clat,aa]]
}


AUnCompactify4Dim={Dot[bb___,USpa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]]]:>Switch[Length[sm],
0,Dot[bb,Sm4[sm],USpb[a]],
_?EvenQ,Dot[bb,Sequence@@(Sm4/@sm),USpa[a]],
_?OddQ,Dot[bb,Sequence@@(Sm4/@sm),USpb[a]]],

Dot[UbarSpa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa__]:>Switch[Length[sm],
0,-Dot[UbarSpb[a],Sm4[sm],aa],
_?EvenQ,Dot[UbarSpa[a],Sequence@@(Sm4/@Reverse[sm]),aa],
_?OddQ,-Dot[UbarSpb[a],Sequence@@(Sm4/@Reverse[sm]),aa]]}

BUnCompactify4Dim=
{Dot[bb___,USpb[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]]]:>Switch[Length[sm],
0,Dot[bb,Sm4[sm],USpa[a]],
_?EvenQ,Dot[bb,Sequence@@(Sm4/@sm),USpb[a]],
_?OddQ,Dot[bb,Sequence@@(Sm4/@sm),USpa[a]]],

Dot[UbarSpb[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a_?SpinorQ]],aa__]:>Switch[Length[sm],
0,-Dot[UbarSpa[a],Sm4[sm],aa],
_?EvenQ,Dot[UbarSpb[a],Sequence@@(Sm4/@Reverse[sm]),aa],
_?OddQ,-Dot[UbarSpa[a],Sequence@@(Sm4/@Reverse[sm]),aa]]
}


AUnCompactify4DimS[a_]:={Dot[bb___,USpa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a]]]:>Switch[Length[sm],
0,Dot[bb,Sm4[sm],USpb[a]],
_?EvenQ,Dot[bb,Sequence@@(Sm4/@sm),USpa[a]],
_?OddQ,Dot[bb,Sequence@@(Sm4/@sm),USpb[a]]],

Dot[UbarSpa[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a]],aa__]:>Switch[Length[sm],
0,-Dot[UbarSpb[a],Sm4[sm],aa],
_?EvenQ,Dot[UbarSpa[a],Sequence@@(Sm4/@Reverse[sm]),aa],
_?OddQ,-Dot[UbarSpb[a],Sequence@@(Sm4/@Reverse[sm]),aa]]}

BUnCompactify4DimS[a_]:=
{Dot[bb___,USpb[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a]]]:>Switch[Length[sm],
0,Dot[bb,Sm4[sm],USpa[a]],
_?EvenQ,Dot[bb,Sequence@@(Sm4/@sm),USpb[a]],
_?OddQ,Dot[bb,Sequence@@(Sm4/@sm),USpa[a]]],

Dot[UbarSpb[(sm:(_?SMatrixQ|Dot[_?SMatrixQ,_?SMatrixQ..]))[a]],aa__]:>Switch[Length[sm],
0,-Dot[UbarSpa[a],Sm4[sm],aa],
_?EvenQ,Dot[UbarSpb[a],Sequence@@(Sm4/@Reverse[sm]),aa],
_?OddQ,-Dot[UbarSpa[a],Sequence@@(Sm4/@Reverse[sm]),aa]]
}


UnCompact[x_]:=x//.{(sp:(Spaa|Spab|Spba|Spbb))[l:(dl:(_Dot|_?SMatrixQ))[ml_?PureSpinorQ],ms___,r:(dr:(_Dot|_?SMatrixQ))[mr_?PureSpinorQ]]:>Ext[sp,NbrDM[dl],NbrDM[dr]][ml,ToSequence[Reverse[dl]],ms,ToSequence[dr],mr],(sp:(Spaa|Spab|Spba|Spbb))[l_?PureSpinorQ,ms___,r:(d:(_Dot|_?SMatrixQ))[m_?PureSpinorQ]]:>Ext[sp,0,NbrDM[d]][l,ms,ToSequence[d],m],(sp:(Spaa|Spab|Spba|Spbb))[l:(d:(_Dot|_?SMatrixQ))[m_?PureSpinorQ],ms___,r_?PureSpinorQ]:>Ext[sp,NbrDM[d],0][m,ToSequence[Reverse[d]],ms,r]}//.UnCompactifyLaRuleA//.UnCompactifyLaRuleB//.AUnCompactify4Dim//.BUnCompactify4Dim

UnCompact[x_,ss_?SpinorQ]:=x//.{(sp:(Spaa|Spab|Spba|Spbb))[l:(dl:(_Dot|_?SMatrixQ))[ss],ms___,r:(dr:(_Dot|_?SMatrixQ))[mr_?PureSpinorQ]]:>Ext[sp,NbrDM[dl],NbrDM[dr]][ss,ToSequence[Reverse[dl]],ms,ToSequence[dr],mr],(sp:(Spaa|Spab|Spba|Spbb))[l:(dl:(_Dot|_?SMatrixQ))[ml_?PureSpinorQ],ms___,r:(dr:(_Dot|_?SMatrixQ))[ss]]:>Ext[sp,NbrDM[dl],NbrDM[dr]][ml,ToSequence[Reverse[dl]],ms,ToSequence[dr],ss],(sp:(Spaa|Spab|Spba|Spbb))[l_?PureSpinorQ,ms___,r:(d:(_Dot|_?SMatrixQ))[ss]]:>Ext[sp,0,NbrDM[d]][l,ms,ToSequence[d],ss],(sp:(Spaa|Spab|Spba|Spbb))[l:(d:(_Dot|_?SMatrixQ))[ss],ms___,r_?PureSpinorQ]:>Ext[sp,NbrDM[d],0][ss,ToSequence[Reverse[d]],ms,r]}//.UnCompactifyLaRuleAs[ss]//.UnCompactifyLaRuleBs[ss]//.AUnCompactify4DimS[ss]//.BUnCompactify4DimS[ss]


To2DimSpinor[Spaa[a_?SpinorQ,b_?SpinorQ]]:=CLa[a].La[b]


To2DimSpinor[Spbb[a_?SpinorQ,b_?SpinorQ]]:=Lat[a].CLat[b]


To2DimSpinor[Spab[a_?SpinorQ,P___?SMatrixQ,b_?SpinorQ]]:=Dot[Lat[b],Sequence@@Reverse[alternate[CSm2,Sm2][{P}]],La[a]]
To2DimSpinor[Spba[b_?SpinorQ,P___?SMatrixQ,a_?SpinorQ]]:=Dot[Lat[b],Sequence@@alternate[CSm2,Sm2][{P}],La[a]]
To2DimSpinor[Spbb[a_?SpinorQ,P___?SMatrixQ,b_?SpinorQ]]:=Dot[Lat[a],Sequence@@alternate[CSm2,Sm2][{P}],CLat[b]]
To2DimSpinor[Spaa[a_?SpinorQ,P___?SMatrixQ,b_?SpinorQ]]:=Dot[CLa[a],Sequence@@alternate[Sm2,CSm2][{P}],La[b]]


To2DimSpinor[d:Dot[Sm[_?SMatrixQ],Sm[_?SMatrixQ]...]]:=Dot@@alternate[CSm2,Sm2][First/@d]
To2DimSpinor[Sm[P_?SMatrixQ]]:=Sm2[P]
To2DimSpinor[SmBA[b_?SpinorQ,a_?SpinorQ]]:=SmBA2[b,a]


To2DimSpinor[x_]:=x/.s:((Spaa|Spab|Spba|Spbb)[_?SpinorQ,___?SMatrixQ,_?SpinorQ]|Sm[_?SMatrixQ]|SmBA[_?SpinorQ,_?SpinorQ]):>To2DimSpinor[s]


To4DimSpinor[x_]:=x//.{
Spaa[a_?SpinorQ,b_?SpinorQ]:>UbarSpa[a].USpa[b]
,Spaa[a_?SpinorQ,p__?SMatrixQ,b_?SpinorQ]:>Dot[UbarSpa[a],Sequence@@(Sm4/@{p}),USpa[b]],

Spbb[a_?SpinorQ,b_?SpinorQ]:>UbarSpb[a].USpb[b],Spbb[a_?SpinorQ,p__?SMatrixQ,b_?SpinorQ]:>Dot[UbarSpb[a],Sequence@@(Sm4/@{p}),USpb[b]],

Spab[a_?SpinorQ,p__?SMatrixQ,b_?SpinorQ]:>Dot[UbarSpa[a],Sequence@@(Sm4/@{p}),USpb[b]],

Spba[b_?SpinorQ,p__?SMatrixQ,a_?SpinorQ]:>Dot[UbarSpb[b],Sequence@@(Sm4/@{p}),USpa[a]],Sm[sm_?SMatrixQ]->Sm4[sm],SmBA[b_?SpinorQ,a_?SpinorQ]->SmBA4[b,a]
}


RightSM2Order[{}]:=True
RightCSM2Order[{}]:=True
RightSM2Order[{sm__}]:=And@@alternate[MatchQ[#,_CSm2]&,MatchQ[#,_Sm2]&][{sm}]
RightCSM2Order[{sm__}]:=And@@alternate[MatchQ[#,_Sm2]&,MatchQ[#,_CSm2]&][{sm}]


ToSpinorLabel2DimRule={
Dot[Lat[b_?SpinorQ],sms___,CLat[a_?SpinorQ]]:>Spbb[b,Sequence@@First/@{sms},a]/;RightSM2Order[{sms}],
Dot[CLa[b_?SpinorQ],sms__,CLat[a_?SpinorQ]]:>Spab[b,Sequence@@First/@{sms},a]/;RightCSM2Order[{sms}],
Dot[Lat[b_?SpinorQ],sms__,La[a_?SpinorQ]]:>Spba[b,Sequence@@First/@{sms},a]/;RightSM2Order[{sms}],
Dot[CLa[b_?SpinorQ],sms___,La[a_?SpinorQ]]:>Spaa[b,Sequence@@First/@{sms},a]/;RightCSM2Order[{sms}],
Dot[CLa[b_?SpinorQ],La[a_?SpinorQ]]->Spaa[b,a],
Dot[Lat[b_?SpinorQ],CLat[a_?SpinorQ]]->Spbb[b,a],
Dot[sms__,La[a_?SpinorQ]]:>(Dot@@(First/@{sms}))[a]/;RightSM2Order[Reverse[{sms}]]&&MatchQ[First/@{sms},{__?SMatrixQ}],
Dot[sms__,CLat[a_?SpinorQ]]:>(Dot@@(First/@{sms}))[a]/;RightCSM2Order[Reverse[{sms}]]&&MatchQ[First/@{sms},{__?SMatrixQ}]
,Dot[Lat[a_?SpinorQ],sms__]:>(Dot@@(First/@Reverse[{sms}]))[a]/;RightSM2Order[{sms}]&&MatchQ[First/@{sms},{__?SMatrixQ}],
Dot[CLa[a_?SpinorQ],sms__]:>(Dot@@(First/@Reverse[{sms}]))[a]/;RightCSM2Order[{sms}]&&MatchQ[First/@{sms},{__?SMatrixQ}]
,d:Dot[(Sm2[_?SMatrixQ]|CSm2[_?SMatrixQ]),(Sm2[_?SMatrixQ]|CSm2[_?SMatrixQ])..]:>   (First/@d)/;(RightCSM2Order[List@@d]||RightSM2Order[List@@d]),La[a_?SpinorQ].Lat[b_?SpinorQ]:>SmBA[b,a],Lat[b_?SpinorQ].La[a_?SpinorQ]:>SmBA[b,a],CLat[b_?SpinorQ].CLa[a_?SpinorQ]:>SmBA[b,a],
CLa[a_?SpinorQ].CLat[b_?SpinorQ]:>SmBA[b,a],
Sm2->Sm,CSm2->Sm,SmBA2->SmBA
}


ToSpinorLabel4DimRule={
Dot[UbarSpa[a_?SpinorQ],sms__Sm4,USpa[b_?SpinorQ]]:>Spaa[a,Sequence@@First/@{sms},b],
Dot[UbarSpb[a_?SpinorQ],sms__Sm4,USpb[b_?SpinorQ]]:>Spbb[a,Sequence@@First/@{sms},b],
Dot[USpa[a_?SpinorQ],sms__Sm4,UbarSpa[b_?SpinorQ]]:>Spaa[b,Sequence@@First/@Reverse[{sms}],a],
Dot[USpb[a_?SpinorQ],sms__Sm4,USpb[b_?SpinorQ]]:>Spbb[b,Sequence@@First/@Reverse[{sms}],a],

Dot[UbarSpa[a_?SpinorQ],sms__Sm4,USpb[b_?SpinorQ]]:>Spab[a,Sequence@@First/@{sms},b],
Dot[UbarSpb[b_?SpinorQ],sms__Sm4,USpa[a_?SpinorQ]]:>Spba[b,Sequence@@First/@{sms},a],
Dot[USpb[b_?SpinorQ],sms__Sm4,UbarSpa[a_?SpinorQ]]:>Spab[a,Sequence@@First/@Reverse[{sms}],b],
Dot[USpa[a_?SpinorQ],sms__Sm4,UbarSpb[b_?SpinorQ]]:>Spba[b,Sequence@@First/@Reverse[{sms}],a],

Dot[UbarSpa[a_?SpinorQ],USpa[b_?SpinorQ]]:>Spaa[a,b],
Dot[UbarSpb[a_?SpinorQ],USpb[b_?SpinorQ]]:>Spbb[a,b],


Dot[sms__Sm4,(USpa|USpb|UbarSpa|UbarSpb)[a_?SpinorQ]]:>(Dot@@(First/@{sms}))[a]/;MatchQ[First/@{sms},{__?SMatrixQ}],

d:Dot[(Sm4[_?SMatrixQ]),(Sm4[_?SMatrixQ])..]:>   (First/@d),

(* does not wirk, since USpa*UbarSpb + USpb*UbarSpa would be transform to 2 SmBA! *)

(*USpa[a_?SpinorQ].UbarSpb[b_?SpinorQ]:>SmBA[b,a],USpb[b_?SpinorQ].USpa[a_?SpinorQ]:>SmBA[b,a]*)

Sm4->Sm,SmBA4->SmBA
}


ToSpinorLabel[x_]:=x/.ToSpinorLabel2DimRule/.ToSpinorLabel4DimRule


Sm2[i_Integer]:=Sm2[Sp[i]];
CSm2[i_Integer]:=CSm2[Sp[i]];
Sm4[i_Integer]:=Sm4[Sp[i]];



SMs=(Sm|Sm2|CSm2|Sm4)


SMSpinorExpand[sm_][x_]:=x/.{smInt[p_Plus]:>(sm[#]&)/@p,smInt[coeff__ a_?SpinorQ]:>coeff sm[a]}


SMToBeExpanded:=_Plus|coeff__ _?SpinorQ


Sm[p:SMToBeExpanded]:=SMSpinorExpand[Sm][smInt[p]]/;$SpinorAutoExpand
Sm2[p:SMToBeExpanded]:=SMSpinorExpand[Sm2][smInt[p]]/;$SpinorAutoExpand
CSm2[p:SMToBeExpanded]:=SMSpinorExpand[CSm2][smInt[p]]/;$SpinorAutoExpand
Sm4[p:SMToBeExpanded]:=SMSpinorExpand[Sm4][smInt[p]]/;$SpinorAutoExpand



$SpinorAutoExpand=True


Sm2/:N[Sm2[a:(_?NumSpinorQ|_?NumVectorQ|_?NumSMatrixQ)],p_:$MachinePrecision]:=N[SlashM2D[a],p]


CSm2/:N[CSm2[a:(_?NumSpinorQ|_?NumVectorQ|_?NumSMatrixQ)],p_:$MachinePrecision]:=N[SlashM2D2[a],p]


Conjugate2Dim[x_]:=x/.{Sm2->CSm2,CSm2->Sm2,La->CLa,CLa->La,CLat->Lat,Lat->CLat}


Sm4/:N[Sm4[a:(_?NumSpinorQ|_?NumVectorQ|_?NumSMatrixQ)],p_:$MachinePrecision]:=N[SlashM[a],p]


PWeight[i_Integer]:=PWeight[Sp[i]]
PWeight[a_][t_Times]:=Plus@@PWeight[a]/@List@@t
PWeight[a_][p_Power]:=p[[2]] PWeight[a][p[[1]]]

PWeight[a_][p_Plus]:=Block[{ll=PWeight[a]/@List@@p},If[Length[Union[ll]]==1,ll[[1]],$Failed]]

PWeight[a_][Spaa[a_,_]|Spaa[_,a_]]:=1
PWeight[a_][Spaa[a_,__,a_]|Spaa[a_,__,a_]]:=2
PWeight[a_][Spaa[__,a_]|Spaa[a_,__]]:=1

PWeight[a_][Spbb[a_,_]|Spbb[_,a_]]:=-1
PWeight[a_][Spbb[a_,__,a_]|Spbb[a_,__,a_]]:=-2
PWeight[a_][Spbb[__,a_]|Spbb[a_,__]]:=-1

PWeight[a_][Spab[a_,__,a_]]:=0
PWeight[a_][Spab[a_,__]]:=1
PWeight[a_][Spab[__,a_]]:=-1

PWeight[a_][(Spaa|Spab|Spba|Spbb)[__,a_,__]]:=0

PWeight[a_][s[___,a_,___]]:=0

PWeight[a_][x_]:=0/;FreeQ[x,a]


APWeight[i_Integer]:=APWeight[Sp[i]]
APWeight[a_][t_Times]:=Plus@@APWeight[a]/@List@@t
APWeight[a_][p_Power]:=p[[2]] APWeight[a][p[[1]]]

APWeight[a_][p_Plus]:=Block[{ll=APWeight[a]/@List@@p},If[Length[Union[ll]]==1,ll[[1]],$Failed]]

APWeight[a_][Spaa[a_,_]|Spaa[_,a_]]:=1
APWeight[a_][Spaa[a_,__,a_]|Spaa[a_,__,a_]]:=2
APWeight[a_][Spaa[__,a_]|Spaa[a_,__]]:=1

APWeight[a_][Spbb[a_,_]|Spbb[_,a_]]:=0
APWeight[a_][Spbb[a_,__,a_]|Spbb[a_,__,a_]]:=0
APWeight[a_][Spbb[__,a_]|Spbb[a_,__]]:=0

APWeight[a_][Spab[a_,__,a_]]:=0
APWeight[a_][Spab[a_,__]]:=1
APWeight[a_][Spab[__,a_]]:=0

APWeight[a_][(Spaa|Spab|Spba|Spbb)[__,a_,__]]:=0

APWeight[a_][s[___,a_,___]]:=0

APWeight[a_][x_]:=0/;FreeQ[x,a]


BPWeight[i_Integer]:=BPWeight[Sp[i]]
BPWeight[a_][t_Times]:=Plus@@BPWeight[a]/@List@@t
BPWeight[a_][p_Power]:=p[[2]] BPWeight[a][p[[1]]]

BPWeight[a_][p_Plus]:=Block[{ll=BPWeight[a]/@List@@p},If[Length[Union[ll]]==1,ll[[1]],$Failed]]

BPWeight[a_][Spaa[a_,_]|Spaa[_,a_]]:=0
BPWeight[a_][Spaa[a_,__,a_]|Spaa[a_,__,a_]]:=0
BPWeight[a_][Spaa[__,a_]|Spaa[a_,__]]:=0

BPWeight[a_][Spbb[a_,_]|Spbb[_,a_]]:=1
BPWeight[a_][Spbb[a_,__,a_]|Spbb[a_,__,a_]]:=2
BPWeight[a_][Spbb[__,a_]|Spbb[a_,__]]:=1

BPWeight[a_][Spab[a_,__,a_]]:=0
BPWeight[a_][Spab[a_,__]]:=0
BPWeight[a_][Spab[__,a_]]:=1

BPWeight[a_][(Spaa|Spab|Spba|Spbb)[__,a_,__]]:=0

BPWeight[a_][s[___,a_,___]]:=0

BPWeight[a_][x_]:=0/;FreeQ[x,a]


APWeight[a_][Dot[CLa[a_],__,La[a_]]]:=2
APWeight[a_][Dot[CLa[a_],__]]:=1
APWeight[a_][Dot[__,La[a_]]]:=1
APWeight[a_][Dot[__,Sm2[a_],__]]:=0

BPWeight[a_][Dot[Lat[a_],__,CLat[a_]]]:=2
BPWeight[a_][Dot[Lat[a_],__]]:=1
BPWeight[a_][Dot[__,CLat[a_]]]:=1
BPWeight[a_][Dot[__,Sm2[a_],__]]:=0

APWeight[a_][Dot[UbarSpa[a_],__,USpa[a_]]]:=2
APWeight[a_][Dot[UbarSpa[a_],__]]:=1
APWeight[a_][Dot[__,USpa[a_]]]:=1
APWeight[a_][Dot[__,Sm4[a_],__]]:=0

BPWeight[a_][Dot[UbarSpb[a_],__,USpb[a_]]]:=2
BPWeight[a_][Dot[UbarSpb[a_],__]]:=1
BPWeight[a_][Dot[__,USpb[a_]]]:=1
BPWeight[a_][Dot[__,Sm4[a_],__]]:=0




ChangeSecond[Spaa]=Spab
ChangeSecond[Spab]=Spaa
ChangeSecond[Spba]=Spbb
ChangeSecond[Spbb]=Spba
ChangeFirst[Spaa]=Spba
ChangeFirst[Spab]=Spbb
ChangeFirst[Spba]=Spaa
ChangeFirst[Spbb]=Spab


SpOpen[x_]:=x//.{(*(sp:(Spaa|Spab|Spba|Spbb))[b_?SpinorQ,before___?SMatrixQ,s_?(SMatrixQ[#]&&OnShellQ[#]&),after___?SMatrixQ,a_?SpinorQ]->FixFirst[sp][b,before,s] FixSecond[sp][s,after,a],*)(sp:(Spaa|Spab|Spbb|Spba))[b_?SpinorQ,before___,s_?(SMatrixQ[#]&&OnShellQ[#]&),after___?SMatrixQ,a_?SpinorQ]:>Switch[Length[{after}],_?EvenQ,ChangeSecond[sp],_?OddQ,sp][b,before,s] FixSecond[sp][s,after,a],(sp:(Spaa|Spab|Spbb|Spba))[b_?SpinorQ,before___?SMatrixQ,s_?(SMatrixQ[#]&&OnShellQ[#]&),after___,a_?SpinorQ]:>Switch[Length[{before}],_?EvenQ,ChangeFirst[sp],_?OddQ,sp][s,after,a] FixFirst[sp][b,before,s] ,Dot[a___,Sm2[s_?OnShellQ],b___]:>Dot[a,CLat[s]] Dot[CLa[s],b],Dot[a___,CSm2[s_?OnShellQ],b___]:>Dot[a,La[s]] Dot[Lat[s],b]}//.{Dot[aa___,Sm4[s_?OnShellQ],USpa[a_?SpinorQ]]:>Dot[aa,USpb[s]] Dot[UbarSpa[s],USpa[a]],Dot[aa___,Sm4[s_?OnShellQ],USpb[a_?SpinorQ]]:>Dot[aa,USpa[s]] Dot[UbarSpb[s],USpb[a]],
Dot[UbarSpb[a_?SpinorQ],Sm4[s_?OnShellQ],b___]:>Dot[UbarSpb[a],USpb[s]] Dot[UbarSpa[s],b],
Dot[UbarSpa[a_?SpinorQ],Sm4[s_?OnShellQ],b___]:>Dot[UbarSpa[a],USpa[s]] Dot[UbarSpb[s],b],
Dot[UbarSpa[a_?SpinorQ],sm__Sm4,Sm4[s_?OnShellQ],b___]:>Switch[Length[{sm}],_?OddQ,Dot[UbarSpa[a],sm,USpb[s]] Dot[UbarSpa[s],b],
_?EvenQ,Dot[UbarSpa[a],sm,USpa[s]] Dot[UbarSpb[s],b]],Dot[UbarSpb[a_?SpinorQ],sm__Sm4,Sm4[s_?OnShellQ],b___]:>Switch[Length[{sm}],_?OddQ,Dot[UbarSpb[a],sm,USpa[s]] Dot[UbarSpb[s],b],
_?EvenQ,Dot[UbarSpb[a],sm,USpb[s]] Dot[UbarSpa[s],b]]
}


(*SpOpen[x_,i_Integer|Sp[i_Integer]]:=SpOpen[x,Sm[i]]*)


SpOpen[x_,i_Integer]:=SpOpen[x,Sp[i]]


SpOpen[x_,s_?SpinorQ(*|s_Sm*)]:=x//.{(sp:(Spaa|Spab|Spbb|Spba))[b_?SpinorQ,before___,s,after___?SMatrixQ,a_?SpinorQ]:>Switch[Length[{after}],_?EvenQ,ChangeSecond[sp],_?OddQ,sp][b,before,s] FixSecond[sp][s,after,a],(sp:(Spaa|Spab|Spbb|Spba))[b_?SpinorQ,before___?SMatrixQ,s,after___,a_?SpinorQ]:>Switch[Length[{before}],_?EvenQ,ChangeFirst[sp],_?OddQ,sp][s,after,a] FixFirst[sp][b,before,s],Dot[a___,Sm2[s],b___]:>Dot[a,CLat[s]] Dot[CLa[s],b],Dot[a___,CSm2[s],b___]:>Dot[a,La[s]] Dot[Lat[s],b]}//.{Dot[aa___,Sm4[s],USpa[a_?SpinorQ]]:>Dot[aa,USpb[s]] Dot[UbarSpa[s],USpa[a]],Dot[aa___,Sm4[s],USpb[a_?SpinorQ]]:>Dot[aa,USpa[s]] Dot[UbarSpb[s],USpb[a]],
Dot[UbarSpb[a_?SpinorQ],Sm4[s],b___]:>Dot[UbarSpb[a],USpb[s]] Dot[UbarSpa[s],b],
Dot[UbarSpa[a_?SpinorQ],Sm4[s],b___]:>Dot[UbarSpa[a],USpa[s]] Dot[UbarSpb[s],b],
Dot[UbarSpa[a_?SpinorQ],sm__Sm4,Sm4[s],b___]:>Switch[Length[{sm}],_?OddQ,Dot[UbarSpa[a],sm,USpb[s]] Dot[UbarSpa[s],b],
_?EvenQ,Dot[UbarSpa[a],sm,USpa[s]] Dot[UbarSpb[s],b]],Dot[UbarSpb[a_?SpinorQ],sm__Sm4,Sm4[s],b___]:>Switch[Length[{sm}],_?OddQ,Dot[UbarSpb[a],sm,USpa[s]] Dot[UbarSpb[s],b],
_?EvenQ,Dot[UbarSpb[a],sm,USpb[s]] Dot[UbarSpa[s],b]]
}


RevSign[_?SpinorQ,sm___,_?SpinorQ(*|_Sm*)]:=-(-1)^NbrDM[sm]


(* contracts last of the first and first ot the last*)
MIX[Spaa,Spba]=Spaa
MIX[Spaa,Spbb]=Spab
MIX[Spab,Spaa]=Spaa
MIX[Spab,Spab]=Spab
MIX[Spba,Spba]=Spba
MIX[Spba,Spbb]=Spbb
MIX[Spbb,Spaa]=Spba
MIX[Spbb,Spab]=Spbb
(* contract two first*)
MIX2[Spaa,Spba]=Spaa
MIX2[Spaa,Spbb]=Spab
MIX2[Spab,Spba]=Spba
MIX2[Spab,Spbb]=Spbb
MIX2[Spba,Spaa]=Spaa
MIX2[Spba,Spab]=Spab
MIX2[Spbb,Spaa]=Spba
MIX2[Spbb,Spab]=Spbb
(* contract two last*)
MIX3[Spaa,Spab]=Spaa
MIX3[Spaa,Spbb]=Spab
MIX3[Spab,Spaa]=Spaa
MIX3[Spab,Spba]=Spab
MIX3[Spba,Spab]=Spba
MIX3[Spba,Spbb]=Spbb
MIX3[Spbb,Spaa]=Spba
MIX3[Spbb,Spba]=Spbb


Conj[UbarSpa]=USpa
Conj[UbarSpb]=USpb
Conj[USpa]=UbarSpa
Conj[USpb]=UbarSpb


SpClose[x_]:=x//.{(SP1:(Sp1:(Spaa|Spba))[r1__,a_?SpinorQ])^n1_. (SP2:(Sp2:(Spba|Spbb))[a_,r2__])^n2_.:>MIX[Sp1,Sp2][r1,a,r2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spab))[a_?SpinorQ,r1___?SMatrixQ,b_?SpinorQ])^n1_. (SP2:(Sp2:(Spba|Spbb))[a_,r2__])^n2_.:>RevSign[a,r1,b] MIX2[Sp1,Sp2][b,Sequence@@Reverse[{r1}],a,r2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spab))[a_?SpinorQ,r1___])^n1_. (SP2:(Sp2:(Spba|Spbb))[a_,r2___?SMatrixQ,b_?SpinorQ])^n2_.:>RevSign[a,r2,b] MIX2[Sp2,Sp1][b,Sequence@@Reverse[{r2}],a,r1]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spab))[a_?SpinorQ,r1___])^n1_.  (SP2:(Sp2:(Spab|Spbb))[r2__,a_])^n2_.:>MIX[Sp2,Sp1][r2,a,r1]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spba))[b_?SpinorQ,r1___?SMatrixQ,a_?SpinorQ])^n1_. (SP2:(Sp2:(Spab|Spbb))[r2__,a_])^n2_.:>RevSign[a,r1,b] MIX3[Sp2,Sp1][r2,a,Sequence@@Reverse[{r1}],b]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0)
,(SP1:(Sp1:(Spaa|Spba))[r1__,a_?SpinorQ])^n1_. (SP2:(Sp2:(Spab|Spbb))[b_?SpinorQ,r2___?SMatrixQ,a_])^n2_.:>RevSign[a,r2,b] MIX3[Sp1,Sp2][r1,a,Sequence@@Reverse[{r2}],b]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0)
}//.{Dot[aa__,CLat[a_?SpinorQ]] Dot[CLa[a_?SpinorQ],bb__]:>Dot[aa,Sm2[a],bb],Dot[aa__,La[a_?SpinorQ]] Dot[Lat[a_?SpinorQ],bb__]:>Dot[aa,CSm2[a],bb],Dot[aa__,CLat[a_?SpinorQ]] (d2:Dot[bb__,La[a_?SpinorQ]]):>(-1)^(Length[d2]+1) Dot[aa,Sm2[a],Sequence@@Conjugate2Dim[Reverse[{bb}]]],Dot[CLa[a_?SpinorQ],aa__] (d2:Dot[Lat[a_?SpinorQ],bb__]):>(-1)^(Length[d2]+1) Dot[Sequence@@Conjugate2Dim[Reverse[{bb}]],Sm2[a],aa]}//.{(SP1:Dot[bb__,USpa[b_?SpinorQ]])^n1_. (SP2:Dot[UbarSpb[b_?SpinorQ],aa__])^n2_.:>Dot[bb,Sm4[b],aa]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[bb__,USpb[b_?SpinorQ]])^n1_. (SP2:Dot[UbarSpa[b_?SpinorQ],aa__])^n2_.:>Dot[bb,Sm4[b],aa]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[(ub1:(UbarSpa|UbarSpb))[b1_?SpinorQ],bb1___Sm4,USpb[b_?SpinorQ]])^n1_. (SP2:Dot[bb2__,USpa[b_]])^n2_.:>-(-1)^Length[{bb1}]Dot[bb2,Sm4[b],Sequence@@Reverse[{bb1}],Conj[ub1][b1]]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[(ub1:(UbarSpa|UbarSpb))[b1_?SpinorQ],bb1___Sm4,USpa[b_?SpinorQ]])^n1_. (SP2:Dot[bb2__,USpb[b_]])^n2_.:>-(-1)^Length[{bb1}]Dot[bb2,Sm4[b],Sequence@@Reverse[{bb1}],Conj[ub1][b1]]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[UbarSpa[b_?SpinorQ],bb1___Sm4,(ub1:(USpa|USpb))[b1_?SpinorQ]])^n1_. (SP2:Dot[UbarSpb[b_],bb2__])^n2_.:>-(-1)^Length[{bb1}]Dot[Conj[ub1][b1],Sequence@@Reverse[{bb1}],Sm4[b],bb2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[UbarSpb[b_?SpinorQ],bb1___Sm4,(ub1:(USpa|USpb))[b1_?SpinorQ]])^n1_. (SP2:Dot[UbarSpa[b_],bb2__])^n2_.:>-(-1)^Length[{bb1}]Dot[Conj[ub1][b1],Sequence@@Reverse[{bb1}],Sm4[b],bb2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0)}


SpClose[x_,i_Integer]:=SpClose[x,Sp[i]]


SpClose[x_,a_?SpinorQ]:=x//.{(SP1:(Sp1:(Spaa|Spba))[r1__,a])^n1_. (SP2:(Sp2:(Spba|Spbb))[a,r2__])^n2_.:>FixFirst[Sp1][r1,a,r2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spab))[a,r1___])^n1_. (SP2:(Sp2:(Spba|Spbb))[a,r2__])^n2_.:>RevSign[a,r1] FixSecond[Sp2][Sequence@@Reverse[{r1}],a,r2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spab))[a,r1___])^n1_.  (SP2:(Sp2:(Spab|Spbb))[r2__,a])^n2_.:>FixFirst[Sp2][r2,a,r1]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),

(SP1:(Sp1:(Spaa|Spba))[r1___,a])^n1_. (SP2:(Sp2:(Spab|Spbb))[r2__,a])^n2_.:>RevSign[a,r1] FixFirst[Sp2][r2,a,Sequence@@Reverse[{r1}]]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0)
}//.{Dot[aa__,CLat[a]]  Dot[CLa[a],bb__]:>Dot[aa,Sm2[a],bb],Dot[aa__,La[a]] Dot[Lat[a],bb__]:>Dot[aa,CSm2[a],bb],Dot[aa__,CLat[a]] (d2:Dot[bb__,La[a]]):>(-1)^(Length[d2]+1) Dot[aa,Sm2[a],Sequence@@Conjugate2Dim[Reverse[{bb}]]],Dot[CLa[a],aa__] (d2:Dot[Lat[a],bb__]):>(-1)^(Length[d2]+1) Dot[Sequence@@Conjugate2Dim[Reverse[{bb}]],Sm2[a],aa]}//.{(SP1:Dot[bb__,USpa[a]])^n1_. (SP2:Dot[UbarSpb[a],aa__])^n2_.:>Dot[bb,Sm4[a],aa]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[bb__,USpb[a]])^n1_. (SP2:Dot[UbarSpa[a],aa__])^n2_.:>Dot[bb,Sm4[a],aa]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[(ub1:(UbarSpa|UbarSpb))[b1_?SpinorQ],bb1___Sm4,USpb[a]])^n1_. (SP2:Dot[bb2__,USpa[a]])^n2_.:>-(-1)^Length[{bb1}]Dot[bb2,Sm4[a],Sequence@@Reverse[{bb1}],Conj[ub1][b1]]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[(ub1:(UbarSpa|UbarSpb))[b1_?SpinorQ],bb1___Sm4,USpa[a]])^n1_. (SP2:Dot[bb2__,USpb[a]])^n2_.:>-(-1)^Length[{bb1}]Dot[bb2,Sm4[a],Sequence@@Reverse[{bb1}],Conj[ub1][b1]]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[UbarSpa[a],bb1___Sm4,(ub1:(USpa|USpb))[b1_?SpinorQ]])^n1_. (SP2:Dot[UbarSpb[a],bb2__])^n2_.:>-(-1)^Length[{bb1}]Dot[Conj[ub1][b1],Sequence@@Reverse[{bb1}],Sm4[a],bb2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0),(SP1:Dot[UbarSpb[a],bb1___Sm4,(ub1:(USpa|USpb))[b1_?SpinorQ]])^n1_. (SP2:Dot[UbarSpa[a],bb2__])^n2_.:>-(-1)^Length[{bb1}]Dot[Conj[ub1][b1],Sequence@@Reverse[{bb1}],Sm4[a],bb2]^Sign[n1] SP1^(n1-Sign[n1]) SP2^(n2-Sign[n2])/;(n1>0&&n2>0)||(n1<0&&n2<0)}//.{(xx_?(APWeight[a][#]>0&))^n1_. (yy_?(BPWeight[a][#]>0&))^n2_.:>(xx^(n1-Sign[n1]) yy^(n2-Sign[n2]) SpClose[Expand[(xx/.aa_?(APWeight[a][#]==1&) bb_?(APWeight[a][#]!=1&)->aa CC[bb] ) (yy/.aa_?(BPWeight[a][#]==1&) bb_?(BPWeight[a][#]!=-1&)->aa CC[bb])] ,a]^Sign[n1]/.CC->Identity)/;(n1>0&&n2>0)||(n1<0&&n2<0)}


FSpAab[a:(_?SpinorQ|(_?SMatrixQ)[_?SpinorQ]|_Dot),ms___?SMatrixQ,b:(_?SpinorQ|(_?SMatrixQ)[_?SpinorQ])|_Dot]:=If[EvenQ[NbrDM[ms]],Spaa,Spab][a,ms,b]

FSpabA[a : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot),ms___?SMatrixQ,b : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot)]:=If[EvenQ[NbrDM[ms]],Spaa,Spba][a,ms,b]


FSpBab[a : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot),ms___?(SMatrixQ[#]||SpinorQ[#]&),b : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot)]:=If[EvenQ[NbrDM[ms]],Spbb,Spba][a,ms,b]

FSpabB[a : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot),ms___?SMatrixQ,b : (_?SpinorQ | (_?SMatrixQ)[_?SpinorQ] | _Dot)]:=If[EvenQ[NbrDM[ms]],Spbb,Spab][a,ms,b]


FixFirst[Spaa|Spab]:=FSpAab
FixFirst[Spbb|Spba]:=FSpBab

FixSecond[Spaa|Spba]:=FSpabA
FixSecond[Spbb|Spab]:=FSpabB


SpinorLikeQ[x__]:=(MatchQ[Seq[x],Seq[___?SMatrixQ,_?SpinorQ]])


RHSschouten=FixSecond[fnb][rf,Sequence@@Reverse[{mf}],mb,rb]/FixSecond[fnd][rf,Sequence@@Reverse[{mf}],md,rd] 1/fnf[l,mf,rf]+FixSecond[fnb][rd,Sequence@@Reverse[{md}],mb,rb]/FixSecond[fnf][rd,Sequence@@Reverse[{md}],mf,rf] 1/fnd[l,md,rd]


ASpinorShift[x_,i_Integer?Positive,z_]:=ASpinorShift[x,Sp[i],z]


ASpinorShift[x_,ss_?SpinorQ,z_]:=x/.{(sp:(Spaa|Spab|Spba|Spbb))[b__,ss,a__]:>ASpinorShift[SpOpen[sp[b,ss,a],ss],ss,z],Spaa[ss,a__,ss]:>Spaa[ss+z,a,ss+z],(sp:(Spaa|Spab))[ss,a__]:>sp[ss+z,a],(sp:(Spaa|Spba))[b__,ss]:>sp[b,ss+z],La[ss]:>La[ss]+La[z],CLa[ss]:>CLa[ss]+CLa[z],
USpa[ss]:>USpa[ss]+USpa[z],
UbarSpa[ss]:>UbarSpa[ss]+UbarSpa[z],
s[b___,ss,a___]:>s[b,ss,a]+Plus@@(Spab[z,#,ss]&/@{b,a}),MP[ss,b_]|MP[b_,ss]:>MP[b,ss]+1/2 Spab[z,b,ss],SmBA[b_,ss]:> SmBA[b,ss]+SmBA[b,z],SmBA2[b_,ss]:> SmBA2[b,ss]+SmBA2[b,z],CSmBA2[b_,ss]:> CSmBA2[b,ss]+CSmBA2[b,z],SmBA4[b_,ss]:> SmBA4[b,ss]+SmBA4[b,z],Sm[ss]:>Sm[ss]+SmBA[ss,z],Sm2[ss]->Sm2[ss]+CLat[ss].CLa[z],CSm2[ss]->CSm2[ss]+La[z].Lat[ss],
Sm4[ss]->Sm4[ss]+SmBA4[ss,z]}


BSpinorShift[x_,i_Integer?Positive,z_]:=BSpinorShift[x,Sp[i],z]


(*BSpinorShift[x_,Sp[i_],z_]:=x/.{(sp:(Spaa|Spab|Spba|Spbb))[b__,Sm[i],a__]:>BSpinorShift[SpOpen[sp[b,Sm[i],a],i],i,z],Spbb[Sp[i],a__,Sp[i]]:>Spbb[Sp[i]+z,a,Sp[i]+z],(sp:(Spbb|Spba))[Sp[i],a__]:>sp[Sp[i]+z,a],(sp:(Spbb|Spab))[b__,Sp[i]]:>sp[b,Sp[i]+z],Lat[Sp[i]]:>Lat[Sp[i]]+Lat[z],CLat[Sp[i]]:>CLat[Sp[i]]+CLat[z],s[b___,Sp[i]|i,a___]:>s[b,Sp[i],a]+Plus@@(Spba[z,#,i]&/@{b,a}),SmBA[Sp[i],a_]:> SmBA[Sp[i],a]+SmBA[z,a],Sm2[Sp[i]]->Sm2[Sp[i]]+CLat[z].CLa[Sp[i]],CSm2[Sp[i]]->CSm2[Sp[i]]+La[Sp[i]].Lat[z]}*)


BSpinorShift[x_,ss_?SpinorQ,z_]:=x/.{(sp:(Spaa|Spab|Spba|Spbb))[b__,ss,a__]:>BSpinorShift[SpOpen[sp[b,ss,a],ss],ss,z],Spbb[ss,a__,ss]:>Spbb[ss+z,a,ss+z],(sp:(Spbb|Spba))[ss,a__]:>sp[ss+z,a],(sp:(Spbb|Spab))[b__,ss]:>sp[b,ss+z],Lat[ss]:>Lat[ss]+Lat[z],CLat[ss]:>CLat[ss]+CLat[z],USpb[ss]:>USpb[ss]+USpb[z],
UbarSpb[ss]:>UbarSpb[ss]+UbarSpb[z],
s[b___,ss,a___]:>s[b,ss,a]+Plus@@(Spba[z,#,ss]&/@{b,a}),MP[ss,b_]|MP[b_,ss]:>MP[ss,b]+1/2 Spba[z,b,ss],SmBA[ss,a_]:> SmBA[ss,a]+SmBA[z,a],SmBA2[ss,a_]:> SmBA2[ss,a]+SmBA2[z,a],CSmBA2[ss,a_]:> CSmBA2[ss,a]+CSmBA2[z,a],SmBA4[ss,a_]:> SmBA4[ss,a]+SmBA4[z,a],Sm[ss]:>Sm[ss]+SmBA[z,ss],Sm2[ss]->Sm2[ss]+CLat[z].CLa[ss],CSm2[ss]->CSm2[ss]+La[ss].Lat[z],Sm4[ss]->Sm4[ss]+SmBA4[z,ss]}


ShiftBA[i_Integer,a_,z_][x_]:=ShiftBA[Sp[i],a,z][x]


ShiftBA[b_,i_Integer,z_][x_]:=ShiftBA[b,Sp[i],z][x]


ShiftBA[b_,a_,z_][x_]:=Block[{zz},ASpinorShift[BSpinorShift[x,b,-zz a],a,zz b]/.zz->z]


BSpinorReplace[x_,i_Integer,z_]:=BSpinorReplace[x,Sp[i],z]
ASpinorReplace[x_,i_Integer,z_]:=ASpinorReplace[x,Sp[i],z]
BSpinorReplace[x_,a_,i_Integer]:=BSpinorReplace[x,a,Sp[i]]
ASpinorReplace[x_,a_,i_Integer]:=ASpinorReplace[x,a,Sp[i]]


BSpinorReplace[x_,ss_?SpinorQ,z_]:=x/.{Spbb[ss,ms__,ss]->Spbb[z,ms,z],(sp:(Spaa|Spab|Spba|Spbb))[b__,ss,a__]:>BSpinorReplace[SpOpen[sp[b,ss,a],ss],ss,z],(sp:(Spbb|Spba))[ss,a__]:>sp[z,a],(sp:(Spbb|Spab))[b__,ss]:>sp[b,z],Lat[ss]:>Lat[z],CLat[ss]:>CLat[z],USpb[ss]->USpb[z],UbarSpb[ss]->UbarSpb[z],s[b___,ss,a___]:>Plus@@(Spba[z,#,ss]&/@{b,a})+If[Length[{b,a}]>1,s[a,b],0],
MP[ss,b_]|MP[b_,ss]:>1/2 Spab[ss,b,z],Sm[ss]->SmBA[z,ss],
Sm2[ss]->SmBA2[z,ss],
CSm2[ss]->CSmBA2[z,ss],
Sm4[ss]->SmBA4[z,ss],
SmBA[ss,a_]:> SmBA[z,a],SmBA2[ss,a_]:> SmBA2[z,a],CSmBA2[ss,a_]:>CSmBA2[z,a],SmBA4[ss,a_]:> SmBA4[z,a]}


ASpinorReplace[x_,ss_?SpinorQ,z_]:=x/.{Spaa[ss,ms__,ss]->Spaa[z,ms,z],(sp:(Spaa|Spab|Spba|Spbb))[b__,ss,a__]:>ASpinorReplace[SpOpen[sp[b,ss,a],ss],ss,z],(sp:(Spaa|Spab))[ss,a__]:>sp[z,a],(sp:(Spaa|Spba))[b__,ss]:>sp[b,z],La[ss]:>La[z],CLa[ss]:>CLa[z],USpa[ss]->USpa[z],UbarSpa[ss]->UbarSpa[z],s[b___,ss,a___]:>Plus@@(Spab[z,#,ss]&/@{b,a})+If[Length[{b,a}]>1,s[a,b],0],MP[ss,b_]|MP[b_,ss]:>1/2 Spab[z,b,ss],Sm[ss]->SmBA[ss,z],
Sm2[ss]->SmBA2[ss,z],
CSm2[ss]->CSmBA2[ss,z],
Sm4[ss]->SmBA4[ss,z],
SmBA[b_,ss]:> SmBA[b,z],SmBA2[b_,ss]:> SmBA2[b,z],CSmBA2[b_,ss]:> CSmBA2[b,z],SmBA4[b_,ss]:> SmBA4[b,z]}


gg=DiagonalMatrix[{1,-1,-1,-1}];


Ga0=DiagonalMatrix[{1,1,-1,-1}];
Ga1={{0,0,0,1},{0,0,1,0},{0,-1,0,0},{-1,0,0,0}};
Ga2={{0,0,0,-\[ImaginaryI]},{0,0,\[ImaginaryI],0},{0,\[ImaginaryI],0,0},{-\[ImaginaryI],0,0,0}};
Ga3={{0,0,1,0},{0,0,0,-1},{-1,0,0,0},{0,1,0,0}};
Ga5={{0,0,1,0},{0,0,0,1},{1,0,0,0},{0,1,0,0}};


Ga={Ga0,Ga1,Ga2,Ga3};


N[ProjPlus,p_:$MachinePrecision]:=((DiagonalMatrix[{1,1,1,1}]+Ga5)/2)
N[ProjMinus,p_:$MachinePrecision]:=((DiagonalMatrix[{1,1,1,1}]-Ga5)/2)
ProjPlus/:MatrixForm[ProjPlus]:=((DiagonalMatrix[{1,1,1,1}]+Ga5)/2)
ProjMinus/:MatrixForm[ProjMinus]:=((DiagonalMatrix[{1,1,1,1}]-Ga5)/2)


SetAttributes[Explicit,{Listable}]


Explicit[d_Dot]:=Explicit/@d


Explicit[Gamma0]:=Ga0
Explicit[Gamma1]:=Ga1
Explicit[Gamma2]:=Ga2
Explicit[Gamma3]:=Ga3
Explicit[Gamma5]:=Ga5


Subscript[Global`\[Gamma], 0]=Gamma0;
Subscript[Global`\[Gamma], 1]=Gamma1;
Subscript[Global`\[Gamma], 2]=Gamma2;
Subscript[Global`\[Gamma], 3]=Gamma3;
Subscript[Global`\[Gamma], 5]=Gamma5;
Off[General::shdw];

If[StringMatchQ[$Version,"*5.*"],Global`SubPlus[Global`P]=ProjPlus;
Global`SubMinus[Global`P]=ProjMinus]

If[StringMatchQ[$Version,"*6.*"],System`SubPlus[Global`P]=ProjPlus;
System`SubMinus[Global`P]=ProjMinus]
On[General::shdw];



N[Sm4[Gamma0],p_:$MachinePrecision]:=Ga0
N[Sm4[Gamma1],p_:$MachinePrecision]:=Ga1
N[Sm4[Gamma2],p_:$MachinePrecision]:=Ga2
N[Sm4[Gamma3],p_:$MachinePrecision]:=Ga3
N[Sm4[Gamma5],p_:$MachinePrecision]:=Ga5
N[Sm4[Gamma0]]:=Ga0
N[Sm4[Gamma1]]:=Ga1
N[Sm4[Gamma2]]:=Ga2
N[Sm4[Gamma3]]:=Ga3
N[Sm4[Gamma5]]:=Ga5

N[Gamma0,p_:$MachinePrecision]:=Ga0
N[Gamma1,p_:$MachinePrecision]:=Ga1
N[Gamma2,p_:$MachinePrecision]:=Ga2
N[Gamma3,p_:$MachinePrecision]:=Ga3
N[Gamma5,p_:$MachinePrecision]:=Ga5

Gamma0/:MatrixForm[Gamma0]:=Ga0
Gamma1/:MatrixForm[Gamma1]:=Ga1
Gamma2/:MatrixForm[Gamma2]:=Ga2
Gamma3/:MatrixForm[Gamma3]:=Ga3
Gamma5/:MatrixForm[Gamma5]:=Ga5


N[Sm2[Gamma0],p_:$MachinePrecision]:=sigma0
N[Sm2[Gamma0]]:=sigma0
N[Sm2[Gamma1],p_:$MachinePrecision]:=sigma1
N[Sm2[Gamma1]]:=sigma1
N[Sm2[Gamma2],p_:$MachinePrecision]:=sigma2
N[Sm2[Gamma2]]:=sigma2
N[Sm2[Gamma3],p_:$MachinePrecision]:=sigma3
N[Sm2[Gamma3]]:=sigma3


Explicit[Sm[a_?NumSpinorQ]]:=SlashM[a]
Explicit[a_?NumSpinorQ]:=SlashM[a]


Explicit[p_?NumVectorQ]:=SlashM[p]


(*Explicit[Sm[i_Integer]]:=Explicit[Sm[Sp[i]]]*)


Explicit[x_]:=x


NumSpinorList={}


NumVectorList={};
NumSMatrixList=Gamma0|Gamma1|Gamma2|Gamma3|Gamma5;


NumSpinorQ[i_Integer?Positive]:=NumSpinorQ[Sp[i]]


NumSpinorQ[x_]:=If[MatchQ[x,NumSpinorList],True,False]


NumVectorQ[x_]:=If[MatchQ[x,NumVectorList],True,False]


NumSMatrixQ[i_Integer?Positive]:=NumSMatrixQ[Sp[i]]
NumSMatrixQ[Sm[a_?SMatrixQ]]:=NumSMatrixQ[a]
NumSMatrixQ[x_]:=If[MatchQ[x,NumSpinorList]||MatchQ[x,NumSMatrixList]||MatchQ[x,NumVectorList],True,False]
NumSpinorQ[x_]:=If[MatchQ[x,NumSpinorList],True,False]


(*Declare4V[a_,xx:{_,_,_,_}]:=(
If[Min[Precision/@xx]<$SpinorPrecision,Message[$SpinorPrecision::lowprecision]];
Unprotect[Num4V];
Num4V[a]:=xx;
Protect[Num4V];
NumVectorList:=Evaluate[Alternatives@@Flatten[{a,NumVectorList}]//Flatten//Union];
Print["Four Momentum ",a," set to ",xx,"."])*)


DeclareLVectorMomentum[a_,xx:{_,_,_,_}]:=(
If[Not[LVectorQ[a]],DeclareLVector[a]];
If[Min[Precision/@xx]<$SpinorPrecision-4,Message[$SpinorPrecision::"lowprecision"]];Unprotect[Num4V];Num4V[a]=xx;Protect[Num4V];

NumVectorList:=Evaluate[Union[Flatten[Alternatives@@Flatten[{a,NumVectorList}]]]];NumDefs[];PRINT["Four Momentum ",a," set to ",xx,"."])


DeclareSpinorMomentum[i_Integer,xx:{_,_,_,_}]:=DeclareSpinorMomentum[Sp[i],xx]


DeclareSpinorMomentum[a_,xx:{_,_,_,_}]:=(
If[Not[SpinorQ[a]],DeclareSpinor[a]];
If[Min[Precision/@xx]<$SpinorPrecision-2,Message[$SpinorPrecision::lowprecision]];
Unprotect[Num4V];
Num4V[a]:=xx;
NumLa[a]=List/@Sol2Dim1[Num4V[a]];
NumLat[a]={Sol2Dim2[Num4V[a]]};
NumCLa[a]=Transpose[\[Epsilon]\[Epsilon].NumLa[a]];NumCLat[a]=\[Epsilon]\[Epsilon].Transpose[NumLat[a]];Protect[Num4V];
NumSpinorList:=Evaluate[Alternatives@@Flatten[{a,NumSpinorList}]//Flatten//Union];NumDefs[];
PRINT["Momentum for spinor ",a," set to ",xx,"."])


DeclareSpinorMomentum[x_,la:{{_?NumericQ},{_?NumericQ}},lat:{{_?NumericQ,_?NumericQ}}]:=Module[{p},
If[Not[SpinorQ[x]],DeclareSpinor[x]];
If[Min[Precision/@(Flatten[{la,lat}])]<$SpinorPrecision,Message[$SpinorPrecision::lowprecision]];Unprotect[Num4V];p=PfromBiSpinor[-Transpose[(\[Epsilon]\[Epsilon].la).(lat.\[Epsilon]\[Epsilon])]];
NumLa[x]=la;NumLat[x]=lat;
NumCLa[x]=Transpose[\[Epsilon]\[Epsilon].la];NumCLat[x]=\[Epsilon]\[Epsilon].Transpose[lat];Num4V[x]=p;NumSpinorList:=Evaluate[Alternatives@@Flatten[{x,NumSpinorList}]//Flatten//Union];
Protect[Num4V];
PRINT["Momentum for spinor ",x," set to ",p,"."]]


xi[n_,s_:1,p_:$SpinorPrecision]:=Module[{res},
res1=Table[Random[Real,1,p+3],{n}];
res1=res1-(Plus@@res1)/n;
res2=Table[Random[Real,1,p+3],{n}];
res2=res2-(Plus@@res2)/n;
res3=Table[Random[Real,1,p+3],{n}];
res3=res3-(Plus@@res3)/n;
res4=s Sqrt[res1^2+res2^2+res3^2];
Thread[{res4,res1,res2,res3}]/Plus@@(s res4)
]


GenMom[split_,p_:$SpinorPrecision][sp:{__?SpinorQ}]:=Module[{t1,t2,Boost,beta,g,n,rescaling=Random[Real,{2,5},p+3],\[Theta]=Random[Real,{0,2 \[Pi]},p+3],
\[Phi]=Random[Real,{0,2 \[Pi]},p+3]},
n=Length[sp];
If[n<4,Print["Cannot generate momenta, ",n, " momenta are not enough"];Return[$Failed]];
t1=xi[split,1,p];
t2=xi[n-split,-1,p];
Boost:={{g,g beta,0,0},{g beta,g,0,0},{0,0,1,0},{0,0,0,1}};
beta=Random[Real,1,p+3];
g=1/Sqrt[1-beta^2];
Rot1={{1,0,0,0},{0,Cos[\[Theta]],0,Sin[\[Theta]]},{0,0,1,0},{0,-Sin[\[Theta]],0,Cos[\[Theta]]}};
Rot2={{1,0,0,0},{0,Cos[\[Phi]],Sin[\[Phi]],0},{0,-Sin[\[Phi]],Cos[\[Phi]],0},{0,0,0,1}};
Bt1=Transpose[Rot2.Rot1.Boost.Transpose[t1]];
Bt2=Transpose[Rot2.Rot1.Boost.Transpose[t2]];
Unprotect[Num4V];(Num4V[sp[[#]]]=rescaling (Join[Bt1,Bt2][[#]]);NumLa[sp[[#]]]=List/@Sol2Dim1[Num4V[sp[[#]]]];
NumLat[sp[[#]]]={Sol2Dim2[Num4V[sp[[#]]]]};
NumCLa[sp[[#]]]=Transpose[\[Epsilon]\[Epsilon].NumLa[sp[[#]]]];NumCLat[sp[[#]]]=\[Epsilon]\[Epsilon].Transpose[NumLat[sp[[#]]]])&/@Range[1,Length[sp]];
Protect[Num4V];NumSpinorList:=Evaluate[Alternatives@@Flatten[{sp,NumSpinorList}]//Flatten//Union];
PRINT["Momenta for the spinors ",Sequence@@Delete[Flatten[{#, ", "}&/@Sort[sp]],-1]," generated."]
]


GenMomenta[sp:{__?SpinorQ},p_:$SpinorPrecision]:=(GenMom[Random[Integer,{2,Length[sp]-2}],p][sp];NumDefs[])


GenMomenta[{a___,i_Integer?Positive,b___},p_:$SpinorPrecision]:=(GenMomenta[{a,Sp[i],b},p];NumDefs[])


GenMomenta[{b___,{i_Integer?Positive,s:(1|-1)},a___},p_:$SpinorPrecision]:=(GenMomenta[{b,{Sp[i],s},a},p];NumDefs[])


GenMomenta[spUnsorted:{{(_?SpinorQ),1|-1}..},p_:$SpinorPrecision]:=Module[{sp,n=Length[spUnsorted],split=Count[Last/@spUnsorted,1]},
If[split<2,Print["Too many negative energies!"];Return[$Failed]];
If[split>n-2,Print["Too many positive energies!"];Return[$Failed]];
sp=First/@Sort[spUnsorted,#1[[2]]>#2[[2]]&];
GenMom[split,p][sp];NumDefs[]]


FindBoostParam[P:{_,_,_,_},s_,beta_,\[Theta]_,\[Phi]_,startVec_:{1,0,0,0}]:=Module[{sols,n,take,Boost,
g=1/Sqrt[1-beta^2],
Rot1={{1,0,0,0},{0,Cos[\[Theta]],0,Sin[\[Theta]]},{0,0,1,0},{0,-Sin[\[Theta]],0,Cos[\[Theta]]}},
Rot2={{1,0,0,0},{0,Cos[\[Phi]],Sin[\[Phi]],0},{0,-Sin[\[Phi]],Cos[\[Phi]],0},{0,0,0,1}}},
Boost={{g,g beta,0,0},{g beta,g,0,0},{0,0,1,0},{0,0,0,1}};
If[Min[Precision/@P,Precision/@startVec]<$SpinorPrecision,Message[$SpinorPrecision::lowprecision]];
If[!TimeLikeQ[P]&&TimeLikeQ[startVec]
,Print[P," not timelike!"];Return[$Failed]];
If[!SpaceLikeQ[P]&&SpaceLikeQ[startVec]
,Print[P," not spacelike!"];Return[$Failed]];
Off[Solve::ifun];sols=Solve[s Rot2.Rot1.Boost.startVec=={P[[1]],P[[2]],P[[3]],P[[4]]},{s,beta,\[Theta],\[Phi]}];
On[Solve::ifun];
n=Length[sols];
take=Random[Integer,{1,n}];
If[n==0,Return[0],If[n==1,Return[sols],Return[sols[[take]]]]]
]


FindBoostParamLightLike[P:{_,_,_,_},s_,beta_,\[Theta]_,\[Phi]_,startVec:({_,_,_,_})]:=Module[{sols,n,take,Boost,
Rot1={{1,0,0,0},{0,Cos[\[Theta]],0,Sin[\[Theta]]},{0,0,1,0},{0,-Sin[\[Theta]],0,Cos[\[Theta]]}},
Rot2={{1,0,0,0},{0,Cos[\[Phi]],Sin[\[Phi]],0},{0,-Sin[\[Phi]],Cos[\[Phi]],0},{0,0,0,1}}},
If[Min[Precision/@P,Precision/@startVec]<$SpinorPrecision,Message[$SpinorPrecision::lowprecision]];
If[!TimeLikeQ[P]&&TimeLikeQ[startVec]
,Print[P," not timelike!"];Return[$Failed]];
If[!SpaceLikeQ[P]&&SpaceLikeQ[startVec]
,Print[P," not spacelike!"];Return[$Failed]];
Off[Solve::ifun];
equs=(s Rot2.Rot1.startVec)[[{1,2,3}]]=={P[[2]],P[[3]],P[[4]]};
sols=Solve[equs,{s,\[Theta],\[Phi]}];
On[Solve::ifun];
n=Length[sols];
take=Random[Integer,{1,n}];
If[n==1,Return[sols],Return[sols[[take]]]]
]


xi[n_,signs_List,p_:$SpinorPrecision]:=Module[{res},
res1=Table[Random[Real,1,p+2],{n}];
res1=res1-(Plus@@res1)/n;
res2=Table[Random[Real,1,p+2],{n}];
res2=res2-(Plus@@res2)/n;
res3=Table[Random[Real,1,p+2],{n}];
res3=res3-(Plus@@res3)/n;
res4=signs  Sqrt[res1^2+res2^2+res3^2];
Thread[{res4,res1,res2,res3}]/Plus@@(res4)
]


xiP[n_,s_,P:{_,_,_,_},p_:$SpinorPrecision]:=Module[{res},
scale=2 Sqrt[P[[1]]^2+P[[2]]^2+P[[3]]^2+P[[4]]^2];
res1=Table[Random[Real,1,p+2],{n}];
res1=scale (2 res1-1);
res2=Table[Random[Real,1,p+2],{n}];
res2=scale (2 res2-1);
res3=Table[Random[Real,1,p+2],{n}];
res3=scale (2 res3-1);
res4=s  Sqrt[res1^2+res2^2+res3^2];
Thread[{res4,res1,res2,res3}]
]


TimeLikeQ[p:{_,_,_,_}]:=If[p.gg.p>0,True,False]
SpaceLikeQ[p:{_,_,_,_}]:=If[p.gg.p<0,True,False]
LightLikeQ[p:{_,_,_,_}]:=If[Chop[p.gg.p,10^-($SpinorPrecision)]==0,True,False]


GenMom[split_][(sp:{__?SpinorQ})->P:{_,_,_,_},p_:$SpinorPrecision]:=Module[{try=0,t1,Boost,beta,s,g,n,\[Theta],\[Phi],PP={0,0,0,1},params},
n=Length[sp];
If[n<2,Print["Cannot generate momenta, ",n, " momenta are not enough"];Return[$Failed]];

params=0;
While[params==0,
PP={0,0,0,1};
While[SpaceLikeQ[PP],
try++;Switch[{TimeLikeQ[P],Sign[P[[1]]],split<n/2},
{True,1,_}|{False,_,False},
t1=xi[split,1,p];
t2=xiP[n-split,-1,P,p];
PP=-P+Plus@@t2,
{True,-1,_}|{False,_,True},
t1=xi[n-split,-1,p];
t2=xiP[split,1,P,p];
PP=-P+Plus@@t2
]
];
Switch[{TimeLikeQ[P],Sign[P[[1]]],split<n/2},
{True,1,_}|{False,_,False},params=FindBoostParam[PP,s,beta,\[Theta],\[Phi],{-1,0,0,0}],
{True,-1,_}|{False,_,True},params=FindBoostParam[PP,s,beta,\[Theta],\[Phi],{1,0,0,0}]
];
];
Boost={{g,g beta,0,0},{g beta,g,0,0},{0,0,1,0},{0,0,0,1}};
g=1/Sqrt[1-beta^2];
Rot1={{1,0,0,0},{0,Cos[\[Theta]],0,Sin[\[Theta]]},{0,0,1,0},{0,-Sin[\[Theta]],0,Cos[\[Theta]]}};
Rot2={{1,0,0,0},{0,Cos[\[Phi]],Sin[\[Phi]],0},{0,-Sin[\[Phi]],Cos[\[Phi]],0},{0,0,0,1}};
Trans=s Rot2.Rot1.Boost/.params;
Bt1=Transpose[Trans.Transpose[t1]];
Unprotect[Num4V];Switch[{TimeLikeQ[P],Sign[P[[1]]],split<n/2},{True,1,_}|{False,_,False},
(Num4V[sp[[#]]]=(Join[Bt1,t2][[#]]))&/@Range[1,Length[sp]],
{True,-1,_}|{False,_,True},
(Num4V[sp[[#]]]=(Join[t2,Bt1][[#]]))&/@Range[1,Length[sp]]
];(NumLa[sp[[#]]]=List/@Sol2Dim1[Num4V[sp[[#]]]];
NumLat[sp[[#]]]={Sol2Dim2[Num4V[sp[[#]]]]};
NumCLa[sp[[#]]]=Transpose[\[Epsilon]\[Epsilon].NumLa[sp[[#]]]];NumCLat[sp[[#]]]=\[Epsilon]\[Epsilon].Transpose[NumLat[sp[[#]]]])&/@Range[1,Length[sp]];
Protect[Num4V];
NumSpinorList:=Evaluate[Alternatives@@Flatten[{sp,NumSpinorList}]//Flatten//Union];NumDefs[];
PRINT["Momenta for the spinors ",Sequence@@Delete[Flatten[{#, ", "}&/@Sort[sp]],-1]," generated."]
]


GenMomenta[{b___,i_Integer?Positive,a___}->P:{_,_,_,_},p_:$SpinorPrecision]:=GenMomenta[{b,Sp[i],a}->P,p]


GenMomenta[(sp:{__?SpinorQ})->P:{_,_,_,_}?SpaceLikeQ,p_:$SpinorPrecision]:=Module [{split=Random[Integer,{1,Length[sp]-1}]},
GenMom[split][sp->P,p]
]


GenMomenta[(sp:{__?SpinorQ})->P:{_,_,_,_}?TimeLikeQ,p_:$SpinorPrecision]:=Module [{split},
Switch[Sign[P[[1]]],1,split=Random[Integer,{2,Length[sp]-1}],
-1,split=Random[Integer,{1,Length[sp]-2}]
];
GenMom[split][sp->P,p]
]


GenMomenta[(sp:{__?SpinorQ})->P:{_,_,_,_}?LightLikeQ,p_:$SpinorPrecision]:=Module [{split=Random[Integer,If[P[[1]]>0,{2,Length[sp]-1},{1,Length[sp]-2}]]},
GenMom[split][sp->P,p]
]


GenMomenta[{b___,{i_Integer,s:(1|-1)},a___}->P:{_,_,_,_},p_:$SpinorPrecision]:=GenMomenta[{b,{Sp[i],s},a}->P,p]


GenMomenta[spUnsorted:{{(_?SpinorQ),1|-1}..}->P:{_,_,_,_}?LightLikeQ,p_:$SpinorPrecision]:=Module[{sp,n=Length[spUnsorted],split=Count[Last/@spUnsorted,1]},
If[split<If[P[[1]]>0,2,1],Print["Too many negative energies!"];Return[$Failed]];
If[split>If[P[[1]]>0,n-1,n-2],Print["Too many positive energies!"];Return[$Failed]];
sp=First/@Sort[spUnsorted,#1[[2]]>#2[[2]]&];
GenMom[split][sp->P,p]]


GenMomenta[spUnsorted:{{(_?SpinorQ),1|-1}..}->P:{_,_,_,_}?SpaceLikeQ,p_:$SpinorPrecision]:=Module[{sp,n=Length[spUnsorted],split=Count[Last/@spUnsorted,1]},
If[split<1,Print["Too many negative energies!"];Return[$Failed]];
If[split>n-1,Print["Too many positive energies!"];Return[$Failed]];
sp=First/@Sort[spUnsorted,#1[[2]]>#2[[2]]&];
GenMom[split][sp->P,p]]


GenMomenta[spUnsorted:{{(_?SpinorQ),1|-1}..}->P:{_,_,_,_}?TimeLikeQ,p_:$SpinorPrecision]:=Module[{sp,n=Length[spUnsorted],split=Count[Last/@spUnsorted,1]},
If[P[[1]]<0&&split<1||P[[1]]>0&&split<2,Print["Too few positive energies!"];Return[$Failed]];
If[(P[[1]]<0&&split>n-1)||(P[[1]]>0&&split>n-1),Print["Too few negative energies!"];Return[$Failed]];
sp=First/@Sort[spUnsorted,#1[[2]]>#2[[2]]&];
GenMom[split][sp->P,p]]


Num4V[i_Integer?Positive]:=Num4V[Sp[i]]
Num4V[p_Plus]:=Num4V/@p
Num4V[coeff__?(FreeQ[#,_?LVectorQ]&) v_?LVectorQ]:=coeff Num4V[v]
Num4V[coeff__?(FreeQ[#,_?LVectorQ]&) p_Plus]:=coeff Num4V[p]


Sol2Dim1[k_List]:=Module[{
sqk1p=Sqrt[k[[1]]+k[[4]]],

ptplus=k[[2]]+\[ImaginaryI] k[[3]]},
If[sqk1p==0,If[k[[1]]-k[[4]]==0,{(k[[2]]-\[ImaginaryI] k[[3]])/Sqrt[2 k[[2]]],(k[[2]]+\[ImaginaryI] k[[3]])/Sqrt[2 k[[2]]]},{(k[[2]]-\[ImaginaryI] k[[3]])/Sqrt[k[[1]]-k[[4]]],Sqrt[k[[1]]-k[[4]]]}],{sqk1p,ptplus/sqk1p}
]]


Sol2Dim2[k_List]:=Module[{factor=1,
sqk1p=Sqrt[k[[1]]+k[[4]]],
ptminus=k[[2]]-\[ImaginaryI] k[[3]]},
If[sqk1p==0,If[k[[1]]-k[[4]]==0,{(k[[2]]+\[ImaginaryI] k[[3]])/Sqrt[2 k[[2]]],(k[[2]]-\[ImaginaryI] k[[3]])/Sqrt[2 k[[2]]]},{(k[[2]]+\[ImaginaryI] k[[3]])/Sqrt[k[[1]]-k[[4]]],Sqrt[k[[1]]-k[[4]]]}],{sqk1p,ptminus/sqk1p}
]]


N[USpa[a_?NumSpinorQ],p_:$MachinePrecision]:=1/Sqrt[2] List/@Flatten[N[{NumLa[a],NumLa[a]},p]]


N[USpb[a_?NumSpinorQ],p_:$MachinePrecision]:=1/Sqrt[2] List/@Flatten[N[{NumCLat[a],-NumCLat[a]},p]]


N[UbarSpb[a_?NumSpinorQ],p_:$MachinePrecision]:=1/Sqrt[2] {Flatten[N[{NumLat[a],-NumLat[a]},p]]}


N[UbarSpa[a_?NumSpinorQ],p_:$MachinePrecision]:=1/Sqrt[2] {Flatten[N[{NumCLa[a],NumCLa[a]},p]]}


SlashM[a_?NumSpinorQ]:=Plus@@((gg.Num4V[a]) N[Ga,\[Infinity]])


SlashM[p_?NumVectorQ]:=Plus@@((gg.Num4V[p]) N[Ga,\[Infinity]])


N[Spaa[a_?NumSpinorQ,b_?NumSpinorQ],p_:$MachinePrecision]:=N[(NumCLa[a].NumLa[b])[[1,1]],p]
N[Spbb[a_?NumSpinorQ,b_?NumSpinorQ],p_:$MachinePrecision]:=N[(NumLat[a].NumCLat[b])[[1,1]],p]


N[Spaa[a_?NumSpinorQ,dm__?NumSMatrixQ,b_?NumSpinorQ],p_:$MachinePrecision]:= (N[UbarSpa[a],p].(Dot@@(Explicit/@{dm})).N[USpa[b],p])[[1,1]]
N[Spab[a_?NumSpinorQ,dm__?NumSMatrixQ,b_?NumSpinorQ],p_:$MachinePrecision]:=(N[UbarSpa[a].(Dot@@(Explicit/@{dm})).USpb[b],p])[[1,1]]
N[Spba[a_?NumSpinorQ,dm__?NumSMatrixQ,b_?NumSpinorQ],p_:$MachinePrecision]:=(N[UbarSpb[a].(Dot@@(Explicit/@{dm})).USpa[b],p])[[1,1]]
N[Spbb[a_?NumSpinorQ,dm__?NumSMatrixQ,b_?NumSpinorQ],p_:$MachinePrecision]:=(N[UbarSpb[a].(Dot@@(Explicit/@{dm})).USpb[b],p])[[1,1]]


N[s[a_?NumSpinorQ,b_?NumSpinorQ],p_:$MachinePrecision]:=N[2 Num4V[a].gg.Num4V[b],p]


N[s[a:(_?NumSpinorQ|_?NumVectorQ),b:(_?NumSpinorQ|_?NumVectorQ)],p_:$MachinePrecision]:=N[(Num4V[a]+Num4V[b]).gg.(Num4V[a]+Num4V[b]),p]


N[s[a:((_?NumSpinorQ|_?NumVectorQ)..)],p_:$MachinePrecision]:=N[Plus@@((Num4V[#]&/@{a})).gg.Plus@@((Num4V[#]&/@{a})),p]


N[MP[a_?(NumVectorQ[#]||NumSpinorQ[#]&),b_?(NumVectorQ[#]||NumSpinorQ[#]&)],p_:$MachinePrecision]:=N[Num4V[a].gg.Num4V[b],p]


N[MP[a_?(NumVectorQ[#]||NumSpinorQ[#]&),b_?(NumVectorQ[#]||NumSpinorQ[#]&)],p_:$MachinePrecision]:=N[Num4V[a].gg.Num4V[b],p]


N[MP2[a_?(NumVectorQ[#]||NumSpinorQ[#]&)],p_:$MachinePrecision]:=N[Num4V[a].gg.Num4V[a],p]


(*Num4V[Sm[i_Integer]]:=Num4V[Sp[i]]*)


sigma={sigma0,sigma1,sigma2,sigma3}


sigma0={{1,0},{0,1}}
sigma1={{0,1},{1,0}}
sigma2={{0,-\[ImaginaryI]},{\[ImaginaryI],0}}
sigma3={{1,0},{0,-1}}


SlashM2D[a:(_?NumSpinorQ|_?NumVectorQ|_?NumSMatrixQ)]:=Plus@@((gg.Num4V[a]) sigma)


SlashM2D2[a:(_?NumSpinorQ|_?NumVectorQ|_?NumSMatrixQ)]:=Transpose[\[Epsilon]\[Epsilon].SlashM2D[a].Transpose[\[Epsilon]\[Epsilon]]]


alternate[f1_,f2_][d_]:=If[EvenQ[#],f1[d[[#]]],f2[d[[#]]]]&/@Range[1,Length[d]]


NumLa[i_Integer]:=NumLa[Sp[i]];
NumCLa[i_Integer]:=NumCLa[Sp[i]];
NumLat[i_Integer]:=NumLat[Sp[i]];
NumCLat[i_Integer]:=NumCLat[Sp[i]];


La/:N[La[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[SlashM2D2[m].NumCLat[a],p]


Lat/:N[Lat[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=(-1) N[NumCLa[a].SlashM2D2[m],p]


CLa/:N[CLa[u:((m_?NumSMatrixQ)[a_?NumSpinorQ])],p_:$MachinePrecision]:=Transpose[\[Epsilon]\[Epsilon].N[La[u],p]]


CLat/:N[CLat[u:((m_?NumSMatrixQ)[a_?NumSpinorQ])],p_:$MachinePrecision]:=\[Epsilon]\[Epsilon].Transpose[N[Lat[u],p]];


La/:N[La[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[Dot@@alternate[SlashM2D,SlashM2D2][d].If[OddQ[Length[d]],NumCLat[a],NumLa[a]],p])


Lat/:N[Lat[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=((-1)^Length[d])(N[If[OddQ[Length[d]],NumCLa[a],NumLat[a]].(Dot@@Reverse[alternate[SlashM2D,SlashM2D2][d]]),p])


CLa/:N[CLa[u:((d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ])],p_:$MachinePrecision]:=Transpose[\[Epsilon]\[Epsilon].N[La[u],p]]


CLat/:N[CLat[u:((d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ])],p_:$MachinePrecision]:=\[Epsilon]\[Epsilon].Transpose[N[Lat[u],p]];


USpa/:N[USpa[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[Sm4[m],p].USpb[a]


USpb/:N[USpb[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=N[Sm4[m],p].USpa[a]


UbarSpa/:N[UbarSpa[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=(-1)UbarSpb[a].N[Sm4[m],p]


UbarSpb/:N[UbarSpb[(m_?NumSMatrixQ)[a_?NumSpinorQ]],p_:$MachinePrecision]:=(-1)UbarSpa[a].N[Sm4[m],p]


USpa/:N[USpa[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[(Sm4/@d).If[OddQ[Length[d]],USpb[a],USpa[a]],p])


USpb/:N[USpb[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=(N[(Sm4/@d).If[OddQ[Length[d]],USpa[a],USpb[a]],p])


UbarSpa/:N[UbarSpa[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=(-1)^Length[d](N[If[OddQ[Length[d]],UbarSpb[a],UbarSpa[a]].(Sm4/@Reverse[d]),p])


UbarSpb/:N[UbarSpb[(d:Dot[(_?NumSMatrixQ),(_?NumSMatrixQ)..])[a_?NumSpinorQ]],p_:$MachinePrecision]:=(-1)^Length[d](N[If[OddQ[Length[d]],UbarSpa[a],UbarSpb[a]].(Sm4/@Reverse[d]),p])


N[s:(Spaa[_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ],_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ]]),p_:$MachinePrecision]:=N[UnCompact[s],p]


N[s:(Spab[_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ],_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ]]),p_:$MachinePrecision]:=N[UnCompact[s],p]


N[s:(Spba[_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ],_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ]]),p_:$MachinePrecision]:=N[UnCompact[s],p]


N[s:(Spbb[_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ],_?NumSpinorQ|(_?NumSMatrixQ)[_?NumSpinorQ]|(Dot[_?NumSMatrixQ,(_?NumSMatrixQ)..])[_?NumSpinorQ]]),p_:$MachinePrecision]:=N[UnCompact[s],p]


NumDefs[]:=Null


OnShellQ[_?SpinorQ]:=True


OnShellQ[v:{_,_,_,_}]:=If[MatchQ[Simplify[v.gg.v],0],True,False]
OnShellQ[Sm[_?SpinorQ]]:=True


(*Spaa[Sm[i_Integer?Positive],rest___]:=Spaa[Sp[i],rest]
Spaa[rest___,Sm[i_Integer?Positive]]:=Spaa[rest,Sp[i]]
Spab[Sm[i_Integer?Positive],rest___]:=Spab[Sp[i],rest]
Spab[rest___,Sm[i_Integer?Positive]]:=Spab[rest,Sp[i]]
Spba[Sm[i_Integer?Positive],rest___]:=Spba[Sp[i],rest]
Spba[rest___,Sm[i_Integer?Positive]]:=Spba[rest,Sp[i]]
Spbb[Sm[i_Integer?Positive],rest___]:=Spbb[Sp[i],rest]
Spbb[rest___,Sm[i_Integer?Positive]]:=Spbb[rest,Sp[i]]*)



(*Spaa[b__,Sp[i_Integer?Positive],a__]:=Spaa[b,Sm[i],a]
Spab[b__,Sp[i_Integer?Positive],a__]:=Spab[b,Sm[i],a]
Spba[b__,Sp[i_Integer?Positive],a__]:=Spba[b,Sm[i],a]
Spbb[b__,Sp[i_Integer?Positive],a__]:=Spbb[b,Sm[i],a]*)


\[Sigma]0={{1,0},{0,1}};
\[Sigma]1={{0,1},{1,0}};
\[Sigma]2={{0,-\[ImaginaryI]},{\[ImaginaryI],0}};
\[Sigma]3={{1,0},{0,-1}};


\[Sigma]={\[Sigma]0,\[Sigma]1,\[Sigma]2,\[Sigma]3};


La[i_Integer?Positive]:=La[Sp[i]]
(*La[Sm[i_Integer?Positive]]:=La[Sp[i]]*)
N[La[a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumLa[a],p]


Lat[i_Integer?Positive]:=Lat[Sp[i]]
(*Lat[Sm[i_Integer?Positive]]:=Lat[Sp[i]]*)
N[Lat[a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumLat[a],p]


\[Epsilon]\[Epsilon]={{0,1},{-1,0}};


CLa[i_Integer?Positive]:=CLa[Sp[i]]
(*CLa[Sm[i_Integer?Positive]]:=CLa[Sp[i]]*)
N[CLa[a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumCLa[a],p]


CLat[i_Integer?Positive]:=CLat[Sp[i]]
(*CLat[Sm[i_Integer?Positive]]:=CLat[Sp[i]]*)
N[CLat[a_?NumSpinorQ],p_:$MachinePrecision]:=N[NumCLat[a],p]


PfromBiSpinor[{{kminus_,ktm_},{ktp_,kplus_}}]:={(kplus+kminus)/2,(-ktp-ktm)/2,(-ktp+ktm)/(2 \[ImaginaryI]),(kplus-kminus)/2}
PfromSm2[{{kminus_,ktm_},{ktp_,kplus_}}]:={(kplus+kminus)/2,(-ktp-ktm)/2,(-ktp+ktm)/(2 \[ImaginaryI]),(kplus-kminus)/2}
PfromCSm2[{{kplus_,mktm_},{mktp_,kminus_}}]:={(kplus+kminus)/2,(mktp+mktm)/2,(mktp-mktm)/(2 \[ImaginaryI]),(kplus-kminus)/2}
PfromSm4[{{E_,_,_,ktp_},{_,_,ktm_,z_},{_,_,_,_},{_,_,_,_}}]:={E,(-ktp-ktm)/2,(ktp-ktm)/(2 \[ImaginaryI]),z}


Las=(La|Lat|CLa|CLat)


LaSpinorExpand[la_][x_]:=x/.{laInt[p_Plus]:>(la[#]&)/@p,laInt[coeff__?(FreeQ[#,_SpinorQ]&) a_?SpinorQ]:>coeff la[a]}


LaToBeExpanded:=_Plus|coeff__?(Not[MatchQ[#,_?SpinorQ]]&) _?SpinorQ


La[p:LaToBeExpanded]:=LaSpinorExpand[La][laInt[p]]/;$SpinorAutoExpand
Lat[p:LaToBeExpanded]:=LaSpinorExpand[Lat][laInt[p]]/;$SpinorAutoExpand
CLa[p:LaToBeExpanded]:=LaSpinorExpand[CLa][laInt[p]]/;$SpinorAutoExpand
CLat[p:LaToBeExpanded]:=LaSpinorExpand[CLat][laInt[p]]/;$SpinorAutoExpand


$SpinorAutoExpand=True


USpa[i_Integer]:=USpa[Sp[i]]
USpb[i_Integer]:=USpb[Sp[i]]
UbarSpa[i_Integer]:=UbarSpa[Sp[i]]
UbarSpb[i_Integer]:=UbarSpb[Sp[i]]


Us=(USpa|USpb|UbarSpa|UbarSpb)


USpinorExpand[u_][x_]:=x/.{uInt[p_Plus]:>(u[#]&)/@p,uInt[coeff__?(FreeQ[#,_SpinorQ]&) a_?SpinorQ]:>coeff u[a]}


UToBeExpanded:=_Plus|coeff__?(Not[MatchQ[#,_?SpinorQ]]&) _?SpinorQ


USpa[p:UToBeExpanded]:=USpinorExpand[USpa][uInt[p]]/;$SpinorAutoExpand
USpb[p:UToBeExpanded]:=USpinorExpand[USpb][uInt[p]]/;$SpinorAutoExpand
UbarSpa[p:UToBeExpanded]:=USpinorExpand[UbarSpa][uInt[p]]/;$SpinorAutoExpand
UbarSpb[p:UToBeExpanded]:=USpinorExpand[UbarSpb][uInt[p]]/;$SpinorAutoExpand


$SpinorAutoExpand=True


SetAttributes[Evaluate[(ToExpression/@$SpinorsFunctions)],{Protected,ReadProtected}]


SetAttributes[{Spaa,Spbb,Spab,Spba,s,Sm,Sm2,CSm2,Sp,La,CLa,Lat,CLat,SmBA,SmBA2,CSmBA2,SmBA4},NHoldAll]


If[Length[$FrontEnd]==1,NotebookOpen[ToFileName[{$SpinorsPath},"SamPalette.nb"],WindowFrame->"Palette",WindowSize->{221,337},WindowToolbars->{},WindowMargins->{{Automatic,0},{Automatic,1}},WindowElements->{},WindowFrameElements->"CloseBox",WindowClickSelect->False,Active->True,CellOpen->True,ShowCellLabel->False,ShowCellTags->False,ShowCellBracket->False,ImageMargins->{{0,Inherited},{Inherited,0}},ButtonBoxOptions->{ButtonStyle->"Paste"},ScreenRectangle->{{0,1280},{0,1024}},ClosingAutoSave->True,Editable->False,WindowToolbars->{},PageWidth->292,WindowElements->"CloseButton",WindowFrameElements->"CloseBox",WindowClickSelect->False,WindowTitle->"S@M Palette",ScrollingOptions->{"PagewiseScrolling"->False},ShowCellBracket->False,CellMargins->{{0,0},{Inherited,0}},Active->True,CellOpen->True,ShowCellLabel->False,ShowCellTags->False,ImageMargins->{{10,Inherited},{Inherited,0}},Background->Automatic,Magnification->1
]]


End[]
EndPackage[]


str=OpenRead[ToFileName[{$SpinorsPath},"SpinorsVersion"]];


$SpinorsVersion=Read[str,String];


Close[str];


Print[
"\n-------  SPINORS @ MATHEMATICA (S@M)  -------\n\n
\t\tVersion:  "<>$SpinorsVersion<>"\n\n Authors:\n\tDaniel Maitre (SLAC),\n\tPierpaolo Mastrolia (University of Zurich)\n\nA list of all functions provided by the package\nis stored in the variable\n\t$SpinorsFunctions
"];
